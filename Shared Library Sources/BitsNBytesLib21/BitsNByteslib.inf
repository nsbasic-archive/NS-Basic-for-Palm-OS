; GENERAL PROPERTIES
;
; All extensions must have a [General] section. Some keys are optional.
;
;	ExtensionName:	User visible name of extension (required)
;	PrcName:	Name of .PRC file of extension (required)
;	Version:	Version of extension (can contain chars) (required)
;	Manufacturer:	Name of manufacturer of extension. (required)
;       =HelpStart=      This key marks the beginning of the help text
;			shown in the extension's properties. Enclose
;			each line in double quotes and terminate the
;			help section with the key =HelpEnd=. (optional,
;			default = "No help available.")
;

[General]

ExtensionName=BitsNbyteslib
PrcName=BitsNbyteslib
Version=2.1
Manufacturer=DubnaWare
InfVers=2.0

;
; EXTENSION HELP
;

=HelpStart=
""
"Shared Library BitsNbyteslib"
""
"This library is for work with bits and bytes with NSBasic."
""
"Written in Dubna, April 2001"
""
=HelpEnd=

;
; METHOD PROPERTIES
;
; This section is organized as follows:
;       section:        [GlobalMethods]
;                       name=index, type, numparams, helpstring
;
; where:
;
;	name:		Name of method
;	index:		Index of function. Index will be passed as the
;			first parameter on the evaluation stack.
;	type:		Either "func" or "sub".  Funcs are methods
;			that push a return value onto the interpreter's
;			evaluation stack. Subs are methods that do
;			not push return values.
;	numparams:	Number of parameters required by this method.
;       helpstring:	Descriptive text about method. (Optional)
;
;
[GlobalMethods]
OrByte= 1, func, 2, "OrByte(in a as string, in b as string) as string"
OrShort= 2, func, 2, "OrShort(in a as int16, in b as int16) as int16"
OrInteger= 3, func, 2, "OrInteger(in a as int32, in b as int32) as int32"

AndByte= 4, func, 2, "AndByte(in a as string, in b as string) as string"
AndShort= 5, func, 2, "AndShort(in a as int16, in b as int16) as int16"
AndInteger= 6, func, 2, "AndInteger(in a as int32, in b as int32) as int32"

XorByte= 7, func, 2, "XorByte(in a as string, in b as string) as string"
XorShort= 8, func, 2, "XorShort(in a as int16, in b as int16) as int16"
XorInteger= 9, func, 2, "XorInteger(in a as int32, in b as int32) as int32"

NotByte= 10, func, 1, "NotByte(in a as string) as string"
NotShort= 11, func, 1, "NotShort(in a as int16) as int16"
NotInteger= 12, func, 1, "NotInteger(in a as int32) as int32"

Swap16= 13, func, 1, "Swap16(in a as int16) as int16"
Swap32= 14, func, 1, "Swap32(in a as int32) as int32"
Swap64= 15, func, 1, "Swap64(in a as flt8) as flt8"

ShiftByte= 16, func, 2, "ShiftByte(in a as string, in b as int16) as string"
ShiftShort= 17, func, 2, "ShiftShort(in a as int16, in b as int16) as int16"
ShiftInteger= 18, func, 2, "ShiftInteger(in a as int32, in b as int16) as int32"

SignShiftByte= 19, func, 2, "SignShiftByte(in a as string, in b as int16) as string"
SignShiftShort= 20, func, 2, "SignShiftShort(in a as int16, in b as int16) as int16"
SignShiftInteger= 21, func, 2, "SignShiftInteger(in a as int32, in b as int16) as int32"

CycleShiftByte= 22, func, 2, "CycleShiftByte(inout a as string, in b as int16) as string"
CycleShiftShort= 23, func, 2, "CycleShiftShort(in a as int16, in b as int16) as int16"
CycleShiftInteger= 24, func, 2, "CycleShiftInteger(in a as int32, in b as int16) as int32"

GetBitByte= 25, func, 2, "GetBitByte(in a as string, in b as int16) as int16"
GetBitShort= 26, func, 2, "GetBitShort(in a as int16, in b as int16) as int16"
GetBitInteger= 27, func, 2, "GetBitInteger(in a as int32, in b as int16) as int16"

SetBitByte= 28, func, 2, "SetBitByte(in a as string, in b as int16) as string"
SetBitShort= 29, func, 2, "SetBitShort(in a as int16, in b as int16) as int16"
SetBitInteger= 30, func, 2, "SetBitInteger(in a as int32, in b as int16) as int32"

ResetBitByte= 31, func, 2, "ResetBitByte(in a as string, in b as int16) as string"
ResetBitShort= 32, func, 2, "ResetBitShort(in a as int16, in b as int16) as int16"
ResetBitInteger= 33, func, 2, "ResetBitInteger(in a as int32, in b as int16) as int32"

InverseBitByte= 34, func, 2, "InverseBitByte(in a as string, in b as int16) as string"
InverseBitShort= 35, func, 2, "InverseBitShort(in a as int16, in b as int16) as int16"
InverseBitInteger= 36, func, 2, "InverseBitInteger(in a as int32, in b as int16) as int32"

EqvByte= 37, func, 3, "EqvByte(in a as string, in b as string, in mask as string) as string"
EqvShort= 38, func, 3, "EqvShort(in a as int16, in b as int16, in mask as int16) as int16"
EqvInteger= 39, func, 3, "EqvInteger(in a as int32, in b as int32, in mask as int32) as int32"

SetLowWord= 40, func, 2, "SetLowWord(in a as int32, in ins as int16) as int32"
SetHiWord= 41, func, 2, "SetHiWord(in a as int32, in ins as int16) as int32"
SetLowByte= 42, func, 2, "SetLowByte(in a as int16, in ins as char) as int16"
SetHiByte= 43, func, 2, "SetHiByte(in a as int16, in ins as char) as int16"

GetLowWord= 44, func, 1, "GetLowWord(in a as int32) as int16"
GetHiWord= 45, func, 1, "GetHiWord(in a as int32) as int16"
GetLowByte= 46, func, 1, "GetLowByte(in a as int16) as char"
GetHiByte= 47, func, 1, "GetHiByte(in a as int16) as char"

NumDec2Hex= 48, func, 1, "NumDec2Hex(in a as int32) as int32"
NumHex2Dec= 49, func, 1, "NumHex2Dec(in a as int32) as int32"
NumBin2Dec= 50, func, 1, "NumBin2Dec(in a as int32) as int32"
NumDec2Bin= 51, func, 1, "NumDec2Bin(in a as int32) as int32"

CRC32= 52, func, 3, "CRC32(in buf as string, in count as int16, in crc as int32) as int32"

EncryptDES= 53, func, 4, "EncryptDES(in src as string, in key as string, inout dst as string, in encrypt as int16) as int32"

EncMD4= 54, func, 3, "EncMD4(in str as string, in strLen as int16, inout digest as string) as int32"
EncMD5= 55, func, 3, "EncMD5(in str as string, in strLen as int16, inout digest as string) as int32"

Version= 56, func, 0, "Version() as int16"

Dec2Hex= 57, sub, 2, "Dec2Hex(in a as int32, inout res as string)"
Hex2Dec= 58, func, 1, "Hex2Dec(in str as string) as int32"
Dec2Bin= 59, sub, 2,  "Dec2Bin(in a as int32, inout res as string)"
Bin2Dec= 60, func, 1, "Bin2Dec(in str as string) as int32"

EncryptDESString= 61, func, 1, "EncryptDESString(in decryptedStr as string) as string"
DecryptDESString= 62, func, 1, "DecryptDESString(in encryptedStr as string) as string"
SetDESKey= 63, proc, 1, "SetDESKey(in keyStr as string)"
