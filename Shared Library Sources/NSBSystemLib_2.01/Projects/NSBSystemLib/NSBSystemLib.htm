<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
<TITLE>Tech Note 14: Using the NSBSystemLib Shared Library</TITLE>
</HEAD>
<BODY TEXT="#000000" LINK="#0000ff" VLINK="#800080" BGCOLOR="#ffffff">

<TABLE CELLSPACING=0 BORDER=0 WIDTH=478>
<TR><TD WIDTH="22%" VALIGN="TOP">
<P><IMG SRC="images/BigIcon.GIF" WIDTH=86 HEIGHT=103></TD>
<TD WIDTH="78%" VALIGN="TOP">
<B><FONT FACE="Helvetica" SIZE=5>
      <P>Tech Note 14: Using the NSBSystemLib Shared Library</P>
      <P>June 14, 2003</P>
</FONT><FONT FACE="Helvetica" SIZE=4><P>&nbsp;</P>
</FONT><FONT FACE="Helvetica" SIZE=2><P>Copyright 2001-2003 NS BASIC Corporation</font></B></TD>
</TR>
</TABLE>
<HR>

<h2>Contents:</h2>
<pre>
    <a href="#intro">Introduction</a>
    <a href="#quickRef">Function Index and Quick Reference</a>
    <a href="#fullRef">Function Reference</a>
</pre>

<a name="intro"><h2>Introduction:</h2>
<P>The NSBSystemLib Shared Library contains functions that provide access
to the PalmOS System.  Some of these functions allow calls to PalmOS
APIs that can not currently be called using NSBasic's SysTrap statements.
Others, just provide a simplified interface to the PalmOS.

<P>The functions in this library are divided into the following categories:

<P><blockquote>Alarms, Databases, Events, Field and Forms, HotSync Data,
Localization, Preferences, Progress Manager, and System Time.  With the 
version 2.0 release, additional categories for bitwise, encryption, decryption,
and screen/color operations have been added.</blockquote>

<P>This document, with its examples, should provide all the information 
necessary to use the functions in the NSBSystemLib.  If more information
about the underlying PalmOS functions is desired, please consult the 
PalmOS SDK Reference or the SDK C header files (*.h).  The PalmOS SDK
Reference can be downloaded from:
<pre>    <A HREF="http://www.palmos.com/dev/tech/docs/">http://www.palmos.com/dev/tech/docs/</A></pre>
The PalmOS SDK (Software Development Kit) can be downloaded from:
<pre>    <A HREF="http://www.palmos.com/dev/tech/tools/">http://www.palmos.com/dev/tech/tools/</A></pre>

<P>In order to use the NSBSystemLib Shared Library, the library must be 
loaded using the NSBasic LoadLibrary statement.  This statement should
be located in the program's Startup code so that the functions
will be available throughout the program.  The LoadLibrary statement
has an optional second parameter to allow you to specify an abbreviated
reference name for the library's functions.  The examples in this
document use "NSL" for this reference name.  Example:<br><br>

<PRE>
Program's Startup code:

	Sub main()
	    LoadLibrary "NSBSystemLib", "NSL"
	End Sub
</PRE>

<P>Also, in order to use the NSBSystemLib Shared Library, the 
NSBSystemLib.INF file must be present in your "nsbasic\lib" directory 
and the NSBSystemLib.prc file must be downloaded to your device.

<P>Except for the functions that return version numbers, all the parameter 
and return data types are either "Integer" or "String".  Version numbers
are returned as a "Double".

<pre></pre>
<a name="quickRef"><h2>Function Index and Quick Reference:</h2><pre>

<a href="#Version Information">Version Information</a>
    <a href="#Version">Version</a>                         version = Version()
    <a href="#CompileInfo">CompileInfo</a>                     compileDateTime = CompileInfo()
    <a href="#SystemVersion">SystemVersion</a>                   version = SystemVersion()

<a href="#Access To Shared Library Global Variables">Access To Shared Library Global Variables</a>
    <a href="#GlobalVersionMajor">GlobalVersionMajor</a>              gblMajor = GlobalVersionMajor()
    <a href="#GlobalVersionMinor">GlobalVersionMinor</a>              gblMinor = GlobalVersionMinor()
    <a href="#GlobalX">GlobalX</a>                         x = GlobalX()
    <a href="#GlobalY">GlobalY</a>                         y = GlobalY()
    <a href="#GlobalStartX">GlobalStartX</a>                    startX = GlobalStartX()
    <a href="#GlobalStartY">GlobalStartY</a>                    startY = GlobalStartY()
    <a href="#GlobalEndX">GlobalEndX</a>                      endX = GlobalEndX()
    <a href="#GlobalEndY">GlobalEndY</a>                      endY = GlobalEndY()
    <a href="#GlobalStartPos">GlobalStartPos</a>                  startPos = GlobalStartPos()
    <a href="#GlobalEndPos">GlobalEndPos</a>                    endPos = GlobalEndPos()
    <a href="#GlobalWidth">GlobalWidth</a>                     width = GlobalWidth()
    <a href="#GlobalHeight">GlobalHeight</a>                    height = GlobalHeight()
    <a href="#GlobalHour">GlobalHour</a>                      gblHour = GlobalHour()
    <a href="#GlobalMinute">GlobalMinute</a>                    gblMinute = GlobalMinute()

<a href="#Alarm Functions">Alarm Functions</a>
    <a href="#SetAlarmReset">SetAlarmReset</a>                   SetAlarmReset resetTime, resetLimit
    <a href="#SetAlarm">SetAlarm</a>                        status = SetAlarm(alarmPgm, alarmTime, alarmCmd, alarmMsg)
    <a href="#CancelAlarm">CancelAlarm</a>                     status = CancelAlarm(alarmPgm)
    <a href="#GetAlarm">GetAlarm</a>                        alarmTime = GetAlarm(alarmPgm, alarmCmd, alarmMsg)
    <a href="#GetAlarmTime">GetAlarmTime</a>                    alarmTime = GetAlarmTime(alarmPgm)
    <a href="#GetAlarmResetTime">GetAlarmResetTime</a>               resetTime = GetAlarmResetTime(alarmPgm)
    <a href="#GetAlarmResetLimit">GetAlarmResetLimit</a>              resetLimit = GetAlarmResetLimit(alarmPgm)
    <a href="#GetAlarmCommand">GetAlarmCommand</a>                 alarmCmd = GetAlarmCommand(alarmPgm)
    <a href="#GetAlarmMessage">GetAlarmMessage</a>                 alarmMsg = GetAlarmMessage(alarmPgm)
    <a href="#AlarmLog">AlarmLog</a>                        alarmTime = AlarmLog(alarmPgm, alarmCmd, alarmMsg)
    <a href="#AlarmLogAlarmTime">AlarmLogAlarmTime</a>               alarmTime = AlarmLogAlarmTime(alarmPgm)
    <a href="#AlarmLogResetTime">AlarmLogResetTime</a>               resetTime = AlarmLogResetTime(alarmPgm)
    <a href="#AlarmLogResetLimit">AlarmLogResetLimit</a>              resetLimit = AlarmLogResetLimit(alarmPgm)
    <a href="#AlarmLogResetCount">AlarmLogResetCount</a>              resetCount = AlarmLogResetCount(alarmPgm)
    <a href="#AlarmLogCommand">AlarmLogCommand</a>                 alarmCmd = AlarmLogCommand(alarmPgm)
    <a href="#AlarmLogMessage">AlarmLogMessage</a>                 alarmMsg = AlarmLogMessage(alarmPgm)
    <a href="#ClearAlarmLog">ClearAlarmLog</a>                   alarmPgm = ClearAlarmLog()

<a href="#Database Functions">Database Functions</a>
    <a href="#FindDatabase">FindDatabase</a>                    dbID = FindDatabase(cardNo, dbName)
    <a href="#DatabaseInfo">DatabaseInfo</a>                    dbName = DatabaseInfo(cardNo, dbID)
    <a href="#DatabaseName">DatabaseName</a>                    dbName = DatabaseName()
    <a href="#DatabaseAttributes">DatabaseAttributes</a>              dbAttributes = DatabaseAttributes()
    <a href="#DatabaseVersion">DatabaseVersion</a>                 dbVersion = DatabaseVersion()
    <a href="#DatabaseCreationDate">DatabaseCreationDate</a>            dbCreationDate = DatabaseCreationDate()
    <a href="#DatabaseModificationDate">DatabaseModificationDate</a>        dbModificationDate = DatabaseModificationDate()
    <a href="#DatabaseBackupDate">DatabaseBackupDate</a>              dbBackupDate = DatabaseBackupDate()
    <a href="#DatabaseModificationNumber">DatabaseModificationNumber</a>      dbModificationNumber = DatabaseModificationNumber()
    <a href="#DatabaseAppInfoID">DatabaseAppInfoID</a>               dbAppInfoID = DatabaseAppInfoID()
    <a href="#DatabaseSortInfoID">DatabaseSortInfoID</a>              dbSortInfoID = DatabaseSortInfoID()
    <a href="#DatabaseType">DatabaseType</a>                    dbType = DatabaseType()
    <a href="#DatabaseCreatorID">DatabaseCreatorID</a>               dbCreatorID = DatabaseCreatorID()
    <a href="#DatabaseTotalSize">DatabaseTotalSize</a>               dbTotalSize = DatabaseTotalSize(cardNo, dbID)
    <a href="#DatabaseNumRecords">DatabaseNumRecords</a>              dbNumRecords = DatabaseNumRecords()
    <a href="#DatabaseDataSize">DatabaseDataSize</a>                dbDataSize = DatabaseDataSize()
    <a href="#DeleteDatabase">DeleteDatabase</a>                  status = DeleteDatabase(cardNo, dbID)
    <a href="#GetNextDatabaseByTypeCreator">GetNextDatabaseByTypeCreator</a>    dbID = GetNextDatabaseByTypeCreator(newSearch, dbType, dbCreatorID, onlyLatestVersion)
    <a href="#DatabaseCardNo">DatabaseCardNo</a>                  dbCardNo = DatabaseCardNo()
    <a href="#NumDatabases">NumDatabases</a>                    nbr = NumDatabases(cardNo)
    <a href="#NumCards">NumCards</a>                        nbr = NumCards()
    <a href="#GetDatabase">GetDatabase</a>                     dbID = GetDatabase(cardNo, index)
    <a href="#SetDatabaseName">SetDatabaseName</a>                 status = SetDatabaseName(cardNo, dbID, dbName)
    <a href="#SetDatabaseAttributes">SetDatabaseAttributes</a>           status = SetDatabaseAttributes(cardNo, dbID, dbAttributes)
    <a href="#SetDatabaseVersion">SetDatabaseVersion</a>              status = SetDatabaseVersion(cardNo, dbID, dbVersion)
    <a href="#SetDatabaseCreationDate">SetDatabaseCreationDate</a>         status = SetDatabaseCreationDate(cardNo, dbID, dbCreationDate)
    <a href="#SetDatabaseModificationDate">SetDatabaseModificationDate</a>     status = SetDatabaseModificationDate(cardNo, dbID, dbModificationDate)
    <a href="#SetDatabaseBackupDate">SetDatabaseBackupDate</a>           status = SetDatabaseBackupDate(cardNo, dbID, dbBackupDate)
    <a href="#SetDatabaseModificationNumber">SetDatabaseModificationNumber</a>   status = SetDatabaseModificationNumber(cardNo, dbID, dbModificationNumber)
    <a href="#SetDatabaseAppInfoID">SetDatabaseAppInfoID</a>            status = SetDatabaseAppInfoID(cardNo, dbID, dbAppInfoID)
    <a href="#SetDatabaseSortInfoID">SetDatabaseSortInfoID</a>           status = SetDatabaseSortInfoID(cardNo, dbID, dbSortInfoID)
    <a href="#SetDatabaseType">SetDatabaseType</a>                 status = SetDatabaseType(cardNo, dbID, dbType)
    <a href="#SetDatabaseCreatorID">SetDatabaseCreatorID</a>            status = SetDatabaseCreatorID(cardNo, dbID, dbCreatorID)

<a href="#Event Functions">Event Functions</a>
    <a href="#GetEvent">GetEvent</a>                        eventType = GetEvent(timeoutTicks, consumePenEvents, returnVirtualEvents)
    <a href="#SysHandleEvent">SysHandleEvent</a>                  SysHandleEvent()
    <a href="#FlushEvents">FlushEvents</a>                     FlushEvents()
    <a href="#KeyEventChr">KeyEventChr</a>                     keyChr = KeyEventChr()
    <a href="#KeyEventKeyCode">KeyEventKeyCode</a>                 keyCode = KeyEventKeyCode()
    <a href="#KeyEventModifiers">KeyEventModifiers</a>               modifiers = KeyEventModifiers()

<a href="#Field and Form Functions">Field and Form Functions</a>
    <a href="#ControlHitControl">ControlHitControl</a>               ControlHitControl objID
    <a href="#FieldCopy">FieldCopy</a>                       FieldCopy objID
    <a href="#FieldCut">FieldCut</a>                        FieldCut objID
    <a href="#FieldInsert">FieldInsert</a>                     FieldInsert objID, insString
    <a href="#FieldPaste">FieldPaste</a>                      FieldPaste objID
    <a href="#FieldUndo">FieldUndo</a>                       FieldUndo objID
    <a href="#FieldGetInsPtPosition">FieldGetInsPtPosition</a>           pos = FieldGetInsPtPosition(objID)
    <a href="#FieldGetSelection">FieldGetSelection</a>               startPos = FieldGetSelection(objID)
    <a href="#FieldAnyDirty">FieldAnyDirty</a>                   dirty = FieldAnyDirty()
    <a href="#FieldDirty">FieldDirty</a>                      dirty = FieldDirty(objID)
    <a href="#FieldSetDirty">FieldSetDirty</a>                   FieldSetDirty objID, dirty
    <a href="#FieldSetAllDirty">FieldSetAllDirty</a>                FieldSetAllDirty dirty
    <a href="#FieldSetSelection">FieldSetSelection</a>               FieldSetSelection objID, startPos, endPos
    <a href="#FieldSetInsertionPoint">FieldSetInsertionPoint</a>          FieldSetInsertionPoint objID, pos
    <a href="#FieldSetInsPtPosition">FieldSetInsPtPosition</a>           FieldSetInsPtPosition objID, pos
    <a href="#FieldGetAttributes">FieldGetAttributes</a>              attributes = FieldGetAttributes(objID)
    <a href="#FieldSetAttributes">FieldSetAttributes</a>              FieldSetAttributes objID, attributes
    <a href="#FieldGetFont">FieldGetFont</a>                    fontId = FieldGetFont(objID)
    <a href="#FieldSetFont">FieldSetFont</a>                    FieldSetFont objID, fontId
    <a href="#FieldGetScrollPosition">FieldGetScrollPosition</a>          position = FieldGetScrollPosition(objID)
    <a href="#FieldSetScrollPosition">FieldSetScrollPosition</a>          FieldSetScrollPosition objID, position
    <a href="#FieldGetScrollValues">FieldGetScrollValues</a>            totalLines = FieldGetScrollValues(objID)
    <a href="#FieldGetVisibleLines">FieldGetVisibleLines</a>            lines = FieldGetVisibleLines(objID)
    <a href="#FieldGetNumberOfBlankLines">FieldGetNumberOfBlankLines</a>      lines = FieldGetNumberOfBlankLines(objID)
    <a href="#FieldScrollable">FieldScrollable</a>                 yesNo = FieldScrollable(objID, direction)
    <a href="#FieldScrollField">FieldScrollField</a>                FieldScrollField objID, nbrLines, direction
    <a href="#FieldSetBounds">FieldSetBounds</a>                  FieldSetBounds objID, topLeftX, topLeftY, width, height
    <a href="#FormGetNumberOfObjects">FormGetNumberOfObjects</a>          nbr = FormGetNumberOfObjects()
    <a href="#FormGetObjectBounds">FormGetObjectBounds</a>             x = FormGetObjectBounds(objID)
    <a href="#FormGetObjectPosition">FormGetObjectPosition</a>           x = FormGetObjectPosition(objID)
    <a href="#FormGetObjectType">FormGetObjectType</a>               type = FormGetObjectType(objID)
    <a href="#FormSetObjectPosition">FormSetObjectPosition</a>           FormSetObjectPosition objID, x, y
    <a href="#FormSetObjectBounds">FormSetObjectBounds</a>             FormSetObjectBounds objID, topLeftX, topLeftY, width, height
    <a href="#FormGetTitle">FormGetTitle</a>                    title = FormGetTitle()
    <a href="#FormReplaceTitle">FormReplaceTitle</a>                FormReplaceTitle title, forceLength
    <a href="#ListGetTopItem">ListGetTopItem</a>                  topItem = ListGetTopItem(objID)
    <a href="#ListSetTopItem">ListSetTopItem</a>                  ListSetTopItem objID, topItem
    <a href="#ListGetVisibleItems">ListGetVisibleItems</a>             visibleItems = ListGetVisibleItems(objID)
    <a href="#ListScrollList">ListScrollList</a>                  result = ListScrollList(objID, direction, nbrItems)

<a href="#Font Support">Font Support</a>
    <a href="#FontGetFont">FontGetFont</a>                     fontId = FontGetFont()
    <a href="#FontSetFont">FontSetFont</a>                     oldFontId = FontSetFont(fontId)
    <a href="#FontSelect">FontSelect</a>                      fontId = FontSelect()
    <a href="#FontCharWidth">FontCharWidth</a>                   width = FontCharWidth(charString)
    <a href="#FontCharsWidth">FontCharsWidth</a>                  width = FontCharsWidth(charString, optionalLen)
    <a href="#FontWidthToOffset">FontWidthToOffset</a>               offset = FontWidthToOffset(charString, optionalLen, width)
    <a href="#FontCharsInWidth">FontCharsInWidth</a>                length = FontCharsInWidth(charString, optionalLen, width)
    <a href="#FontWordWrap">FontWordWrap</a>                    length = FontWordWrap(charString, width)

<a href="#HotSync Data">HotSync Data</a>
    <a href="#SyncUserName">SyncUserName</a>                    userName = SyncUserName()
    <a href="#SuccessfulSync">SuccessfulSync</a>                  syncDate = SuccessfulSync()
    <a href="#LastSync">LastSync</a>                        syncDate = LastSync()

<a href="#Localization Functions">Localization Functions</a>
    <a href="#LocalizeNumber">LocalizeNumber</a>                  localNbrStr = LocalizeNumber(stdNbrStr)
    <a href="#DelocalizeNumber">DelocalizeNumber</a>                stdNbrStr = DelocalizeNumber(localNbrStr)
    <a href="#LocalizeDate">LocalizeDate</a>                    localDateStr = LocalizeDate(stdDateStr, ToDateFormat, longDateFormat)

<a href="#Preference Functions">Preference Functions</a>
    <a href="#GetAppPreferences">GetAppPreferences</a>               data = GetAppPreferences(pgmName, prefId, saved)
    <a href="#SetAppPreferences">SetAppPreferences</a>               status = SetAppPreferences(pgmName, prefId, data, saved)
    <a href="#GetSysPreference">GetSysPreference</a>                data = GetSysPreference(prefID)
    <a href="#SetSysPreference">SetSysPreference</a>                SetSysPreference prefID, data

<a href="#Progress Manager Functions">Progress Manager Functions</a>
    <a href="#ProgressStartDialog">ProgressStartDialog</a>             ProgressStartDialog title
    <a href="#ProgressStopDialog">ProgressStopDialog</a>              ProgressStopDialog force
    <a href="#ProgressUpdateDialog">ProgressUpdateDialog</a>            ProgressUpdateDialog error, message
    <a href="#ProgressUserCancel">ProgressUserCancel</a>              canceled = ProgressUserCancel()
    <a href="#ProgressPercent">ProgressPercent</a>                 percent = ProgressPercent(current, count)
    <a href="#ProgressPercentString">ProgressPercentString</a>           strValue = ProgressPercentString(percent, resolution, completeChar, incompleteChar)

<a href="#String Functions">String Functions</a>
    <a href="#String4ToInt">String4ToInt</a>                    intValue = String4ToInt(fourByteString)
    <a href="#IntToString4">IntToString4</a>                    fourByteString = IntToString4(intValue)
    <a href="#DelimitedItem">DelimitedItem</a>                   item = DelimitedItem(inputStr, delimiter, nbr)
    <a href="#FixedWidthString">FixedWidthString</a>                fixedStr = FixedWidthString(origStr, width, options)
    <a href="#NormalSpacedString">NormalSpacedString</a>              normalStr = NormalSpacedString(origStr)

<a href="#System Time Functions">System Time Functions</a>
    <a href="#SelectOneTime">SelectOneTime</a>                   newTimeSelected = SelectOneTime(defHour, defMinute, title)
    <a href="#IncrementSystemTime">IncrementSystemTime</a>             newSysTime = IncrementSystemTime(oldSysTime, hours, minutes, seconds)
    <a href="#SystemTime">SystemTime</a>                      sysTime = SystemTime(strDate, strTime, seconds, ToDateFormat)
    <a href="#StringDateTime">StringDateTime</a>                  strDateTime = StringDateTime(sysTime, ToDateFormat, ToTimeFormat, AMPMFormat)
    <a href="#StringDate">StringDate</a>                      strDate = StringDate(sysTime, ToDateFormat)
    <a href="#StringTime">StringTime</a>                      strTime = StringTime(sysTime, ToTimeFormat, AMPMFormat)

<a href="#Version 1.4 Changes and Additions">Version 1.4 Changes and Additions</a>
    <a href="#PostEvent">PostEvent</a>                       PostEvent eventNbr
    <a href="#FormGetFocus">FormGetFocus</a>                    objID = FormGetFocus()
    <a href="#FieldGetTextLength">FieldGetTextLength</a>              txtLen = FieldGetTextLength(objID)
    <a href="#RandomNumber">RandomNumber</a>                    nbr = RandomNumber(seed, minNbr, maxNbr)
    <a href="#ResetAutoOffTimer">ResetAutoOffTimer</a>               ResetAutoOffTimer()
    <a href="#SetAutoOffTime">SetAutoOffTime</a>                  oldSeconds = SetAutoOffTime(newSeconds)
    <a href="#ProgramVersionString">ProgramVersionString</a>            verStr = ProgramVersionString(cardNbr, pgmName)
    <a href="#DynamicHeapSize">DynamicHeapSize</a>                 heapSize = DynamicHeapSize()
    <a href="#DynamicHeapFree">DynamicHeapFree</a>                 freeSize = DynamicHeapFree()
    <a href="#DynamicHeapMaxChunk">DynamicHeapMaxChunk</a>             maxChunkSize = DynamicHeapMaxChunk()
    <a href="#SortInit">SortInit</a>                        error = SortInit(maxItems, itemType)
    <a href="#SortAddString">SortAddString</a>                   error = SortAddString(strItem)
    <a href="#SortAddInteger">SortAddInteger</a>                  error = SortAddInteger(intItem)
    <a href="#SortAddDouble">SortAddDouble</a>                   error = SortAddDouble(dblItem)
    <a href="#SortGetString">SortGetString</a>                   strItem = SortGetString(index)
    <a href="#SortGetInteger">SortGetInteger</a>                  intItem = SortGetInteger(index)
    <a href="#SortGetDouble">SortGetDouble</a>                   dblItem = SortGetDouble(index)
    <a href="#SortQSort">SortQSort</a>                       numItems = SortQSort(reverseSort, caselessSort)
    <a href="#SortInsertionSort">SortInsertionSort</a>               numItems = SortInsertionSort(reverseSort, caselessSort)
    <a href="#ListQSort">ListQSort</a>                       numItems = ListQSort(objID, reverseSort, caselessSort)
    <a href="#ListInsertionSort">ListInsertionSort</a>               numItems = ListInsertionSort(objID, reverseSort, caselessSort)

<a href="#Version 2.0 Changes and Additions">Version 2.0 Changes and Additions</a>
    <a href="#FormGetAllObjectTypes">FormGetAllObjectTypes</a>           type = FormGetAllObjectTypes(objID)
    <a href="#FieldClearAll">FieldClearAll</a>                   FieldClearAll()
    <a href="#ObjectWithPoint">ObjectWithPoint</a>                 obj = ObjectWithPoint(x, y, returnType, searchOption)
    <a href="#ANDInt">ANDInt</a>                          result = ANDInt(int1, int2)
    <a href="#ORInt">ORInt</a>                           result = ORInt(int1, int2)
    <a href="#XORInt">XORInt</a>                          result = XORInt(int1, int2)
    <a href="#OnesComplement">OnesComplement</a>                  result = OnesComplement(intValue)
    <a href="#BitValue">BitValue</a>                        result = BitValue(intValue, bitNumber)
    <a href="#BitsValue">BitsValue</a>                       result = BitsValue(intValue, startBit, endBit)
    <a href="#SetBitValue">SetBitValue</a>                     result = SetBitValue(intValue, bitNumber, bitValue)
    <a href="#SetBitsValue">SetBitsValue</a>                    result = SetBitsValue(intValue, bitsValue, startBit, endBit)
    <a href="#IntToHex">IntToHex</a>                        hexValue = IntToHex(intValue, trimLeading)
    <a href="#HexToInt">HexToInt</a>                        intValue = HexToInt(hexValue)
    <a href="#IntToBin">IntToBin</a>                        binValue = IntToBin(intValue, trimLeading)
    <a href="#BinToInt">BinToInt</a>                        intValue = BinToInt(binValue)

<a href="#Screen and Color Functions">Screen and Color Functions</a>
    <a href="#GetSupportedDepths">GetSupportedDepths</a>              depths = GetSupportedDepths()
    <a href="#DepthSupported">DepthSupported</a>                  boolean = DepthSupported(depth)
    <a href="#ColorSupported">ColorSupported</a>                  boolean = ColorSupported()
    <a href="#SetDepth">SetDepth</a>                        SetDepth depth
    <a href="#SetColor">SetColor</a>                        SetColor boolean
    <a href="#SaveScreenMode">SaveScreenMode</a>                  SaveScreenMode()
    <a href="#RestoreScreenMode">RestoreScreenMode</a>               RestoreScreenMode()
    <a href="#CurrentDepth">CurrentDepth</a>                    depth = CurrentDepth()
    <a href="#CurrentColor">CurrentColor</a>                    boolean = CurrentColor()
    <a href="#SetToDefaults">SetToDefaults</a>                   SetToDefaults()
    <a href="#DefaultDepth">DefaultDepth</a>                    depth = DefaultDepth()
    <a href="#DefaultColor">DefaultColor</a>                    boolean = DefaultColor()
    <a href="#GetTableEntryIndex">GetTableEntryIndex</a>              index = GetTableEntryIndex(which)
    <a href="#GetTableEntryRGB">GetTableEntryRGB</a>                index = GetTableEntryRGB(which)
    <a href="#GetRGBIndex">GetRGBIndex</a>                     index = GetRGBIndex()
    <a href="#GetRGBRed">GetRGBRed</a>                       red = GetRGBRed()
    <a href="#GetRGBGreen">GetRGBGreen</a>                     green = GetRGBGreen()
    <a href="#GetRGBBlue">GetRGBBlue</a>                      blue = GetRGBBlue()
    <a href="#SetTableEntryIndex">SetTableEntryIndex</a>              SetTableEntryIndex which, index
    <a href="#SetTableEntryRGB">SetTableEntryRGB</a>                SetTableEntryRGB which, red, green, blue
    <a href="#BrightnessAdjust">BrightnessAdjust</a>                BrightnessAdjust()
    <a href="#ContrastAdjust">ContrastAdjust</a>                  ContrastAdjust()
    <a href="#PickColorIndex">PickColorIndex</a>                  changed = PickColorIndex(index, title)
    <a href="#PickColorRGB">PickColorRGB</a>                    changed = PickColorRGB(red, green, blue, title)
    <a href="#IndexToRGB">IndexToRGB</a>                      IndexToRGB index
    <a href="#RGBToIndex">RGBToIndex</a>                      index = RGBToIndex(red, green, blue)
    <a href="#SetForeColor">SetForeColor</a>                    oldIndex = SetForeColor(newIndex)
    <a href="#SetBackColor">SetBackColor</a>                    oldIndex = SetBackColor(newIndex)
    <a href="#SetTextColor">SetTextColor</a>                    oldIndex = SetTextColor(newIndex)
    <a href="#DrawLine">DrawLine</a>                        DrawLine x1, y1, x2, y2
    <a href="#DrawGrayLine">DrawGrayLine</a>                    DrawGrayLine x1, y1, x2, y2
    <a href="#EraseLine">EraseLine</a>                       EraseLine x1, y1, x2, y2
    <a href="#InvertLine">InvertLine</a>                      InvertLine x1, y1, x2, y2
    <a href="#DrawPixel">DrawPixel</a>                       DrawPixel x, y
    <a href="#ErasePixel">ErasePixel</a>                      ErasePixel x, y
    <a href="#InvertPixel">InvertPixel</a>                     InvertPixel x, y
    <a href="#GetPixel">GetPixel</a>                        index = GetPixel(x, y)
    <a href="#ScreenLock">ScreenLock</a>                      success = ScreenLock(mode)
    <a href="#ScreenUnlock">ScreenUnlock</a>                    ScreenUnlock()
    <a href="#WinSaveBits">WinSaveBits</a>                     WinSaveBits index, x, y, width, height
    <a href="#WinRestoreBits">WinRestoreBits</a>                  WinRestoreBits index, x, y

<a href="#Sleep and Wake Event Functions">Sleep and Wake Event Functions</a>
    <a href="#SetSleepEvent">SetSleepEvent</a>                   SetSleepEvent eventNbr
    <a href="#SetWakeEvent">SetWakeEvent</a>                    SetWakeEvent eventNbr
    <a href="#GetSleepEvent">GetSleepEvent</a>                   eventNbr = GetSleepEvent()
    <a href="#GetWakeEvent">GetWakeEvent</a>                    eventNbr = GetWakeEvent()
    <a href="#GetSleepEventTime">GetSleepEventTime</a>               eventTime = GetSleepEventTime()
    <a href="#GetWakeEventTime">GetWakeEventTime</a>                eventTime = GetWakeEventTime()

<a href="#String Encryption and Decryption Functions">String Encryption and Decryption Functions</a>
    <a href="#EncryptDESString">EncryptDESString</a>                encryptedStr = EncryptDESString(decryptedStr)
    <a href="#DecryptDESString">DecryptDESString</a>                decryptedStr = DecryptDESString(encryptedStr)
    <a href="#SetDESKey">SetDESKey</a>                       SetDESKey keyStr
</pre>
<a name="fullRef"><h2>NSBSystemLib Function Reference:</h2>
<hr><a name="Version Information"><h2>Version Information</h2>
The version information functions provide information about
the version of the NSBSystemLib Shared Library and about the
user's PalmOS System.
<a name="Version"><h4>Version</h4>

<pre>version = NSBSystemLib.Version()</pre>

Returns the version number of the NSBSystemLib Shared Library.
<pre>
<p><i>Returns</i>

version as Double

<p><i>Example</i>

Dim version as Double
version = NSL.Version()
</pre>
<a name="CompileInfo"><h4>CompileInfo</h4>

<pre>compileDateTime = NSBSystemLib.CompileInfo()</pre>

Returns the date and time that the NSBSystemLib was compiled.
<pre>
<p><i>Returns</i>

compileDateTime as String

<p><i>Example</i>

Dim compileDateTime as String
compileDateTime = NSL.CompileInfo()
</pre>
<a name="SystemVersion"><h4>SystemVersion</h4>

<pre>version = NSBSystemLib.SystemVersion()</pre>

Returns the version number of the PalmOS system.
<pre>
<p><i>Returns</i>

version as Double

<p><i>Example</i>

Dim version as Double
version = NSL.SystemVersion()
</pre>
See also:  GlobalVersionMajor(), GlobalVersionMinor()
<hr><a name="Access To Shared Library Global Variables"><h2>Access To Shared Library Global Variables</h2>
Currently, shared libraries may return only one numeric
value from a function call.  A number of functions in
this library, however, have multiple numeric values that
they retrieve.  In order to make these values available,
they are stored as a library global variable.  The
following functions return the values of these global
variables.
<br><br>
In general, the global access functions are used after
making a specific function call.
<a name="GlobalVersionMajor"><h4>GlobalVersionMajor</h4>

<pre>gblMajor = NSBSystemLib.GlobalVersionMajor()</pre>

Returns the major version number portion of the PalmOS version.
This value is stored as a library global variable at library
load time.
<pre>
<p><i>Returns</i>

gblMajor as Integer

<p><i>Example</i>

Dim gblMajor as Integer
gblMajor = NSL.GlobalVersionMajor()
</pre>
See also:  SystemVersion()
<a name="GlobalVersionMinor"><h4>GlobalVersionMinor</h4>

<pre>gblMinor = NSBSystemLib.GlobalVersionMinor()</pre>

Returns the minor version number portion of the PalmOS version.
This value is stored as a library global variable at library
load time.
<pre>
<p><i>Returns</i>

gblMinor as Integer

<p><i>Example</i>

Dim gblMinor as Integer
gblMinor = NSL.GlobalVersionMinor()
</pre>
See also:  SystemVersion()
<a name="GlobalX"><h4>GlobalX</h4>

<pre>x = NSBSystemLib.GlobalX()</pre>

Returns the value of the global variable "x" in the
NSBSystemLib Shared Library.
<pre>
<p><i>Returns</i>

x as Integer

<p><i>Example</i>

Dim x as Integer
x = NSL.GlobalX()
</pre>
<a name="GlobalY"><h4>GlobalY</h4>

<pre>y = NSBSystemLib.GlobalY()</pre>

Returns the value of the global variable "y" in the
NSBSystemLib Shared Library.
<pre>
<p><i>Returns</i>

y as Integer

<p><i>Example</i>

Dim y as Integer
y = NSL.GlobalY()
</pre>
<a name="GlobalStartX"><h4>GlobalStartX</h4>

<pre>startX = NSBSystemLib.GlobalStartX()</pre>

Returns the value of the global variable "startX" in the
NSBSystemLib Shared Library.
<pre>
<p><i>Returns</i>

startX as Integer

<p><i>Example</i>

Dim startX as Integer
startX = NSL.GlobalStartX()
</pre>
<a name="GlobalStartY"><h4>GlobalStartY</h4>

<pre>startY = NSBSystemLib.GlobalStartY()</pre>

Returns the value of the global variable "startY" in the
NSBSystemLib Shared Library.
<pre>
<p><i>Returns</i>

startY as Integer

<p><i>Example</i>

Dim startY as Integer
startY = NSL.GlobalStartY()
</pre>
<a name="GlobalEndX"><h4>GlobalEndX</h4>

<pre>endX = NSBSystemLib.GlobalEndX()</pre>

Returns the value of the global variable "endX" in the
NSBSystemLib Shared Library.
<pre>
<p><i>Returns</i>

endX as Integer

<p><i>Example</i>

Dim endX as Integer
endX = NSL.GlobalEndX()
</pre>
<a name="GlobalEndY"><h4>GlobalEndY</h4>

<pre>endY = NSBSystemLib.GlobalEndY()</pre>

Returns the value of the global variable "endY" in the
NSBSystemLib Shared Library.
<pre>
<p><i>Returns</i>

endY as Integer

<p><i>Example</i>

Dim endY as Integer
endY = NSL.GlobalEndY()
</pre>
<a name="GlobalStartPos"><h4>GlobalStartPos</h4>

<pre>startPos = NSBSystemLib.GlobalStartPos()</pre>

Returns the value of the global variable "startPos" in the
NSBSystemLib Shared Library.
<pre>
<p><i>Returns</i>

startPos as Integer

<p><i>Example</i>

Dim startPos as Integer
startPos = NSL.GlobalStartPos()
</pre>
<a name="GlobalEndPos"><h4>GlobalEndPos</h4>

<pre>endPos = NSBSystemLib.GlobalEndPos()</pre>

Returns the value of the global variable "endPos" in the
NSBSystemLib Shared Library.
<pre>
<p><i>Returns</i>

endPos as Integer

<p><i>Example</i>

Dim endPos as Integer
endPos = NSL.GlobalEndPos()
</pre>
<a name="GlobalWidth"><h4>GlobalWidth</h4>

<pre>width = NSBSystemLib.GlobalWidth()</pre>

Returns the value of the global variable "width" in the
NSBSystemLib Shared Library.
<pre>
<p><i>Returns</i>

width as Integer

<p><i>Example</i>

Dim width as Integer
width = NSL.GlobalWidth()
</pre>
<a name="GlobalHeight"><h4>GlobalHeight</h4>

<pre>height = NSBSystemLib.GlobalHeight()</pre>

Returns the value of the global variable "height" in the
NSBSystemLib Shared Library.
<pre>
<p><i>Returns</i>

height as Integer

<p><i>Example</i>

Dim height as Integer
height = NSL.GlobalHeight()
</pre>
<a name="GlobalHour"><h4>GlobalHour</h4>

<pre>gblHour = NSBSystemLib.GlobalHour()</pre>

Returns the value of the global variable "hour" in the
NSBSystemLib Shared Library.
<pre>
<p><i>Returns</i>

gblHour as Integer

<p><i>Example</i>

Dim gblHour as Integer
gblHour = NSL.GlobalHour()
</pre>
See also:  SelectOneTime()
<a name="GlobalMinute"><h4>GlobalMinute</h4>

<pre>gblMinute = NSBSystemLib.GlobalMinute()</pre>

Returns the value of the global variable "minute" in the
NSBSystemLib Shared Library.
<pre>
<p><i>Returns</i>

gblMinute as Integer

<p><i>Example</i>

Dim gblMinute as Integer
gblMinute = NSL.GlobalMinute()
</pre>
See also:  SelectOneTime()
<hr><a name="Alarm Functions"><h2>Alarm Functions</h2>
Alarms, under PalmOS, are implemented by the system calling
a program as a specially launched subprogram.  As such, a
program must be written specifically to be able to process
alarms.  Some of the requirements of such a program include
the acceptance of special launch codes and the inability to
access any global variables.  NSBasic programs can not currently
adhere to these requirements and thus, can not process alarms
by themselves.  NSBasic programs can, however, utilize alarms
by using alarm "proxy" programs.
<br><br>
An alarm proxy program, as its name implies, acts on behalf of
an NSBasic program.  The alarm functions described here, are
intended to be used with the NSBAlarmProxy programs that are
distributed with this library.  Currently, PalmOS only supports
one active alarm for any one particular program.  For this reason,
there are 5 NSBAlarmProxy programs available.  With 5 proxy programs,
your single NSBasic program can set up to 5 active alarms, you
can have 5 NSBasic programs, each with 1 active alarm, or any
other combination.  If you are only setting one alarm, then you
only need to install one alarm proxy program.  The NSBAlarmProxy
programs are named:
<blockquote>NSBAlarmProxy1, NSBAlarmProxy2, NSBAlarmProxy3,
NSBAlarmProxy4, and NSBAlarmProxy5</blockquote>
The NSBAlarmProxy programs can do a number of different things
on behalf of your NSBasic program.  They can just simply
wake up a device, sound an alarm, display an alert, start
a named program, or enqueue an event that can be detected
by a running NSBasic program.  Alarms can also be set to
automatically reset or reschedule themselves.  By using the
reset feature with event enqueueing, you can easily
implement a crude "interrupt timer".
<br><br>
In most cases, when an alarm is triggered, the alarm proxy
program will write a "log" of its activity.  This log is
written to the proxy program's application preferences.  As
such, only the last activity will be available and no
separate database is created.  This information can be
used for a variety of purposes.  One of which is to determine
if your NSBasic program was started by a user or by an alarm.
This is done in your startup code by checking the alarm's
log time against the current time.  If they are the same, or
reasonably close, and your program's name is also in the log,
then you can conclude that your program was started by an
alarm.  With this information, you can choose to have your
program start with a different form than normal or some
other alternate startup processing.
<a name="SetAlarmReset"><h4>SetAlarmReset</h4>

<pre>NSBSystemLib.SetAlarmReset resetTime, resetLimit</pre>

Establishes an automatic alarm reset interval for the next
alarm that is set.
<pre><p><i>Parameters</i>

resetTime as Integer
	Reset interval in seconds
	  0 = do not automatically reset alarm

resetLimit as Integer
	Limit to the number of automatic resets that can occur.
	 -1 = resets are not limited - CancelAlarm() must be
	      used to stop automatic resets.
	  0 = do not automatically reset alarm

<p><i>Example</i>

Dim resetTime as Integer
Dim resetLimit as Integer

resetTime = 10
resetLimit = -1
NSL.SetAlarmReset resetTime, resetLimit
</pre>
If this feature is to be used, it must be called before
each SetAlarm() function.
<br><br>
Note:  Care should be taken when using automatic resets
to avoid a potential infinite loop.  This is especially
true when the alarm enqueues events.  An infinite loop
can occur when alarms occur at a rate faster than they
can be processed.  In general, reset intervals should
not be less than 2 seconds.
<a name="SetAlarm"><h4>SetAlarm</h4>

<pre>status = NSBSystemLib.SetAlarm(alarmPgm, alarmTime, alarmCmd, alarmMsg)</pre>

Sets an alarm for the specified program.  The alarm features
in this library are intended to be used only with the
NSBAlarmProxy programs.  While it is possible to use these
functions with other programs, it is highly discouraged.
This is because these functions write to the program's
application preferences.  Non-proxy programs that may use the
same preferences may become corrupt and require a hard
reset and restoration.  The program names have not been
restricted to allow for future additional alarm proxy programs.
<pre><p><i>Parameters</i>

alarmPgm as String
	Alarm program.
alarmTime as Integer
	Absolute alarm time in system time format or a time
	increment in seconds from the current time.  This time
	is considered as an absolute time if its value is greater
	or equal to the value of the current system time minus 5
	minutes.
alarmCmd as Integer
	Alarm Command explanations:
	  -32767 to -30001 = "Timer" commands
	     These commands have the least amount of overhead
	     associated with them.  They do not write to the
	     alarm log information.  In addition, they automat-
	     ically reset the alarm.  As such, they must be
	     specifically cancelled using the CancelAlarm()
	     function.
	
	     These commands queue an event which is the
	     absolute (positive) value of the command.
	
	     The reset interval (seconds) used is calculated as:
	          abs(cmd) - 30000
	          example:  -30005 has a reset interval of 5
	                           seconds and queues an event
	                           with an event type of 30005.
	  0 = enqueue a "nilEvent" - can be used to just simply
	      wake up or turn on a PalmOS device
	  1 = sound a system alarm sound only
	  2 = sound a system alarm sound and produce an Alert
	      with the message specified in the alarmMsg parameter.
	  3 = start the program with the name specified in the
	      alarmMsg parameter.  The alarmMsg parameter, in this
	      case, is a coded string with the following format:
	          &lt;programName&gt;[,&lt;launcherWaitTime&gt;][;&lt;userInfo&gt;]
	          examples:  "Address"
	                     "Address;started by MyProg"
	                     "Address,6;started by MyProg"
	          notes:  The launcherWaitTime is the time, in
	                  in seconds to wait for the current program
	                  to terminate - the default is 2 seconds.
	                  The userInfo, as well as the entire string,
	                  is written to the alarmLog.  It can be used
	                  for any purpose you like.
	   4 to 255 = enqueue a Key Event with a value equal to
	              the specified alarmCmd
	   24832 to 30000 = enqueue a generic event with an event
	                    type equal to the specified alarmCmd.
alarmMsg as String
	 A string of 80 characters or less that is used as the
	 message for alarmCmd 2 or the program code for alarmCmd 3.
	 It is also written to the alarm log to provide any info.
	 that may be useful.

<p><i>Returns</i>

status as Integer
	 0 = no error
	-1 = specified alarm program is not installed
	-2 = almErrorMemory - insufficient memory
	-3 = almErrorFull - alarm queue is full
	-4 = unexpected/unrecognized error

<p><i>Example</i>

Dim status as Integer
Dim alarmPgm as String
Dim alarmTime as Integer
Dim alarmCmd as Integer
Dim alarmMsg as String

alarmPgm = "NSBAlarmProxy1"
alarmTime = 3600    ' 1 hour from now
alarmCmd = 3
alarmMsg = "Hey Wake UP!"
status = NSL.SetAlarm(alarmPgm, alarmTime, alarmCmd, alarmMsg)
</pre>
See also:  SystemTime()
<br><br>
Note:  Care should be taken when using automatic resets
to avoid a potential infinite loop.  This is especially
true when the alarm enqueues events.  An infinite loop
can occur when alarms occur at a rate faster than they
can be processed.  In general, reset intervals should
not be less than 2 seconds.
<a name="CancelAlarm"><h4>CancelAlarm</h4>

<pre>status = NSBSystemLib.CancelAlarm(alarmPgm)</pre>

Cancel an alarm set, if any, for the specified program.
<pre><p><i>Parameter</i>

alarmPgm as String
	Alarm program.

<p><i>Returns</i>

status as Integer
	 0 = no error
	-1 = specified alarm program is not installed
	-2 = almErrorMemory - insufficient memory
	-3 = almErrorFull - alarm queue is full
	-4 = unexpected/unrecognized error

<p><i>Example</i>

Dim status as Integer
Dim alarmPgm as String

alarmPgm = "NSBAlarmProxy1"
status = NSL.CancelAlarm(alarmPgm)
</pre>
<a name="GetAlarm"><h4>GetAlarm</h4>

<pre>alarmTime = NSBSystemLib.GetAlarm(alarmPgm, alarmCmd, alarmMsg)</pre>

Retrieves information about a currently set alarm.
<pre><p><i>Parameters</i>

alarmPgm as String
	Alarm program.
alarmCmd as String
	AlarmCmd as a string.  This value is returned and
	must be initialized to a maximum length before calling
	the function.  This value should never be more than
	6 characters in length.
alarmMsg as String
	Alarm message as a string.  This value is returned and
	must be initialized to a maximum length before calling
	the function.  This value should never be more than
	80 characters in length.

<p><i>Returns</i>

alarmTime as Integer
	Alarm time in system time format.  This value is expressed
	as the number of seconds since January 1st, 1904.

<p><i>Example</i>

Dim alarmTime as Integer
Dim alarmPgm as String
Dim alarmCmd as String
Dim alarmMsg as String

alarmPgm = "NSBAlarmProxy1"
alarmCmd = "123456"
alarmMsg = "1234567890123456789012345678901234567890" _
         + "1234567890123456789012345678901234567890"
alarmTime = NSL.GetAlarm(alarmPgm, alarmCmd, alarmMsg)
</pre>
See also:  StringDateTime(), StringDate(), StringTime()
<a name="GetAlarmTime"><h4>GetAlarmTime</h4>

<pre>alarmTime = NSBSystemLib.GetAlarmTime(alarmPgm)</pre>

Retrieves information about a currently set alarm.
<pre><p><i>Parameter</i>

alarmPgm as String
	Alarm program.

<p><i>Returns</i>

alarmTime as Integer
	Alarm time in system time format.  This value is expressed
	as the number of seconds since January 1st, 1904.

<p><i>Example</i>

Dim alarmTime as Integer
Dim alarmPgm as String

alarmPgm = "NSBAlarmProxy1"
alarmTime = NSL.GetAlarmTime(alarmPgm)
</pre>
See also:  StringDateTime(), StringDate(), StringTime()
<a name="GetAlarmResetTime"><h4>GetAlarmResetTime</h4>

<pre>resetTime = NSBSystemLib.GetAlarmResetTime(alarmPgm)</pre>

Retrieves information about a currently set alarm.
<pre><p><i>Parameter</i>

alarmPgm as String
	Alarm program.

<p><i>Returns</i>

resetTime as Integer
	Alarm reset time in seconds.

<p><i>Example</i>

Dim resetTime as Integer
Dim alarmPgm as String

alarmPgm = "NSBAlarmProxy1"
resetTime = NSL.GetAlarmResetTime(alarmPgm)
</pre>
<a name="GetAlarmResetLimit"><h4>GetAlarmResetLimit</h4>

<pre>resetLimit = NSBSystemLib.GetAlarmResetLimit(alarmPgm)</pre>

Retrieves information about a currently set alarm.
<pre><p><i>Parameter</i>

alarmPgm as String
	Alarm program.

<p><i>Returns</i>

resetLimit as Integer
	Alarm reset limit.

<p><i>Example</i>

Dim resetLimit as Integer
Dim alarmPgm as String

alarmPgm = "NSBAlarmProxy1"
resetLimit = NSL.GetAlarmResetLimit(alarmPgm)
</pre>
<a name="GetAlarmCommand"><h4>GetAlarmCommand</h4>

<pre>alarmCmd = NSBSystemLib.GetAlarmCommand(alarmPgm)</pre>

Retrieves information about a currently set alarm.
<pre><p><i>Parameter</i>

alarmPgm as String
	Alarm program.

<p><i>Returns</i>

alarmCmd as Integer
	Alarm command.

<p><i>Example</i>

Dim alarmCmd as Integer
Dim alarmPgm as String

alarmPgm = "NSBAlarmProxy1"
alarmCmd = NSL.GetAlarmCommand(alarmPgm)
</pre>
<a name="GetAlarmMessage"><h4>GetAlarmMessage</h4>

<pre>alarmMsg = NSBSystemLib.GetAlarmMessage(alarmPgm)</pre>

Retrieves information about a currently set alarm.
<pre><p><i>Parameter</i>

alarmPgm as String
	Alarm program.

<p><i>Returns</i>

alarmMsg as String
	Alarm message.

<p><i>Example</i>

Dim alarmMsg as String
Dim alarmPgm as String

alarmPgm = "NSBAlarmProxy1"
alarmMsg = NSL.GetAlarmMessage(alarmPgm)
</pre>
<a name="AlarmLog"><h4>AlarmLog</h4>

<pre>alarmTime = NSBSystemLib.AlarmLog(alarmPgm, alarmCmd, alarmMsg)</pre>

Retrieves information about an alarm that has already been
processed.
<pre><p><i>Parameters</i>

alarmPgm as String
	Alarm program.
alarmCmd as String
	AlarmCmd as a string.  This value is returned and
	must be initialized to a maximum length before calling
	the function.  This value should never be more than
	6 characters in length.
alarmMsg as String
	Alarm message as a string.  This value is returned and
	must be initialized to a maximum length before calling
	the function.  This value should never be more than
	80 characters in length.

<p><i>Returns</i>

alarmTime as Integer
	Alarm time in system time format.  This value is expressed
	as the number of seconds since January 1st, 1904.

<p><i>Example</i>

Dim alarmTime as Integer
Dim alarmPgm as String
Dim alarmCmd as String
Dim alarmMsg as String

alarmPgm = "NSBAlarmProxy1"
alarmCmd = "123456"
alarmMsg = "1234567890123456789012345678901234567890" _
         + "1234567890123456789012345678901234567890"
alarmTime = NSL.AlarmLog(alarmPgm, alarmCmd, alarmMsg)
</pre>
See also:  StringDateTime(), StringDate(), StringTime()
<a name="AlarmLogAlarmTime"><h4>AlarmLogAlarmTime</h4>

<pre>alarmTime = NSBSystemLib.AlarmLogAlarmTime(alarmPgm)</pre>

Retrieves information about an alarm that has already been
processed.
<pre><p><i>Parameter</i>

alarmPgm as String
	Alarm program.

<p><i>Returns</i>

alarmTime as Integer
	Alarm time in system time format.  This value is expressed
	as the number of seconds since January 1st, 1904.

<p><i>Example</i>

Dim alarmTime as Integer
Dim alarmPgm as String

alarmPgm = "NSBAlarmProxy1"
alarmTime = NSL.AlarmLogAlarmTime(alarmPgm)
</pre>
See also:  StringDateTime(), StringDate(), StringTime()
<a name="AlarmLogResetTime"><h4>AlarmLogResetTime</h4>

<pre>resetTime = NSBSystemLib.AlarmLogResetTime(alarmPgm)</pre>

Retrieves information about an alarm that has already been
processed.
<pre><p><i>Parameter</i>

alarmPgm as String
	Alarm program.

<p><i>Returns</i>

resetTime as Integer
	Alarm time reset time in seconds.

<p><i>Example</i>

Dim resetTime as Integer
Dim alarmPgm as String

alarmPgm = "NSBAlarmProxy1"
resetTime = NSL.AlarmLogResetTime(alarmPgm)
</pre>
<a name="AlarmLogResetLimit"><h4>AlarmLogResetLimit</h4>

<pre>resetLimit = NSBSystemLib.AlarmLogResetLimit(alarmPgm)</pre>

Retrieves information about an alarm that has already been
processed.
<pre><p><i>Parameter</i>

alarmPgm as String
	Alarm program.

<p><i>Returns</i>

resetLimit as Integer
	Alarm time reset limit.

<p><i>Example</i>

Dim resetLimit as Integer
Dim alarmPgm as String

alarmPgm = "NSBAlarmProxy1"
resetLimit = NSL.AlarmLogResetLimit(alarmPgm)
</pre>
<a name="AlarmLogResetCount"><h4>AlarmLogResetCount</h4>

<pre>resetCount = NSBSystemLib.AlarmLogResetCount(alarmPgm)</pre>

Retrieves information about an alarm that has already been
processed.
<pre><p><i>Parameter</i>

alarmPgm as String
	Alarm program.

<p><i>Returns</i>

resetCount as Integer
	The number of times the alarm as been automatically reset.

<p><i>Example</i>

Dim resetCount as Integer
Dim alarmPgm as String

alarmPgm = "NSBAlarmProxy1"
resetCount = NSL.AlarmLogResetCount(alarmPgm)
</pre>
<a name="AlarmLogCommand"><h4>AlarmLogCommand</h4>

<pre>alarmCmd = NSBSystemLib.AlarmLogCommand(alarmPgm)</pre>

Retrieves information about an alarm that has already been
processed.
<pre><p><i>Parameter</i>

alarmPgm as String
	Alarm program.

<p><i>Returns</i>

alarmCmd as Integer
	Alarm command.

<p><i>Example</i>

Dim alarmCmd as Integer
Dim alarmPgm as String

alarmPgm = "NSBAlarmProxy1"
alarmCmd = NSL.AlarmLogCommand(alarmPgm)
</pre>
<a name="AlarmLogMessage"><h4>AlarmLogMessage</h4>

<pre>alarmMsg = NSBSystemLib.AlarmLogMessage(alarmPgm)</pre>

Retrieves information about an alarm that has already been
processed.
<pre><p><i>Parameter</i>

alarmPgm as String
	Alarm program.

<p><i>Returns</i>

alarmMsg as String
	Alarm message.

<p><i>Example</i>

Dim alarmMsg as String
Dim alarmPgm as String

alarmPgm = "NSBAlarmProxy1"
alarmMsg = NSL.AlarmLogMessage(alarmPgm)
</pre>
<a name="ClearAlarmLog"><h4>ClearAlarmLog</h4>

<pre>alarmPgm = NSBSystemLib.ClearAlarmLog()</pre>

Clears the alarm log data for a specified alarm program.
<pre>
<p><i>Returns</i>

alarmPgm as String

<p><i>Example</i>

Dim alarmPgm as String

alarmPgm = "NSBAlarmProxy1"
alarmPgm = NSL.ClearAlarmLog()
</pre>
<hr><a name="Database Functions"><h2>Database Functions</h2>
The database functions provide methods for determining the
databases residing on the PalmOS device.  They also provide
information about these databases and allow some of this
information to be changed.  These functions do not provide
methods for reading and writing the data actually contained
in a database.
<a name="FindDatabase"><h4>FindDatabase</h4>

<pre>dbID = NSBSystemLib.FindDatabase(cardNo, dbName)</pre>

Returns the database ID (LocalID) of the named database.
<pre><p><i>Parameters</i>

cardNo as Integer
	This value will most likely be 0.
dbName as String
	Database name.

<p><i>Returns</i>

dbID as Integer
	dbID if the named database is found.
	0 if the named database is not found.

<p><i>Example</i>

Dim dbID as Integer
Dim cardNo as Integer
Dim dbName as String

cardNo = 0
dbName = "NSBRuntime"
dbID = NSL.FindDatabase(cardNo, dbName)
</pre>
<a name="DatabaseInfo"><h4>DatabaseInfo</h4>

<pre>dbName = NSBSystemLib.DatabaseInfo(cardNo, dbID)</pre>

Returns the database name for the specified card number and
database ID (LocalID).  It also retrieves many other fields of
database information.  See the example and notes for
for more information on how to access this data.
<pre><p><i>Parameters</i>

cardNo as Integer
dbID as Integer

<p><i>Returns</i>

dbName as String

<p><i>Example</i>

Dim cardNo as Integer
Dim dbID as Integer
Dim dbName as String
Dim dbVersion as Integer
Dim dbCreationDate as Integer
Dim dbModificationDate as Integer
Dim dbBackupDate as Integer
Dim dbModificationNumber as Integer
Dim dbAppInfoID as Integer
Dim dbSortInfoID as Integer
Dim dbType as Integer
Dim dbCreatorID as Integer

cardNo = 0
dbName = "NSBRuntime"
dbID = NSBNSL.FindDatabase(cardNo, dbName)
If dbID &lt;&gt; 0 Then
    dbName = NSL.DatabaseInfo(cardNo, dbID)
    If dbName &lt;&gt; "" Then
        dbVersion = NSL.DatabaseVersion()
        dbCreationDate = NSL.DatabaseCreationDate()
        dbModificationDate = NSL.DatabaseModificationDate()
        dbBackupDate = NSL.DatabaseBackupDate()
        dbModificationNumber = NSL.DatabaseModificationNumber()
        dbAppInfoID = NSL.DatabaseAppInfoID()
        dbSortInfoID = NSL.DatabaseSortInfoID()
        dbType = NSL.DatabaseType()
        dbCreatorID = NSL.DatabaseCreatorID()
    EndIf
EndIf
</pre>
 See also:  DatabaseName(), DatabaseAttributes(),
            DatabaseVersion(), DatabaseCreationDate(),
            DatabaseModificationDate(), DatabaseBackupDate(),
            DatabaseModificationNumber(), DatabaseType(),
            DatabaseCreatorID()
<a name="DatabaseName"><h4>DatabaseName</h4>

<pre>dbName = NSBSystemLib.DatabaseName()</pre>

Returns a database name that was previously retrieved by
a call to DatabaseInfo().
<pre>
<p><i>Returns</i>

dbName as String

<p><i>Example</i>

See the example provided with the DatabaseInfo() function.
</pre>
<a name="DatabaseAttributes"><h4>DatabaseAttributes</h4>

<pre>dbAttributes = NSBSystemLib.DatabaseAttributes()</pre>

Returns database attributes that were previously retrieved by
a call to DatabaseInfo().
<pre>
<p><i>Returns</i>

dbAttributes as Integer
	The attributes value is a bitmapped value.  The following
	list contains the bit mask values available:
	    Bit  0  (0x0001) - dmHdrAttrResDB
	    Bit  1  (0x0002) - dmHdrAttrReadOnly
	    Bit  2  (0x0004) - dmHdrAttrAppInfoDirty
	    Bit  3  (0x0008) - dmHdrAttrBackup
	    Bit  4  (0x0010) - dmhdrAttrOKToInstallNewer
	    Bit  5  (0x0020) - dmHdrAttrResetAfterInstall
	    Bit  6  (0x0040) - dmHdrAttrCopyPrevention
	    Bit  7  (0x0080) - dmHdrAttrStream
	    Bit  8  (0x0100) - dmHdrAttrHidden
	    Bit  9  (0x0200) - hmHdrAttrLaunchableData
	    Bit 15  (0x8000) - dmHdrAttrOpen

<p><i>Example</i>

See the example provided with the DatabaseInfo() function.
</pre>
<a name="DatabaseVersion"><h4>DatabaseVersion</h4>

<pre>dbVersion = NSBSystemLib.DatabaseVersion()</pre>

Returns the database version that was previously retrieved by
a call to DatabaseInfo().
<pre>
<p><i>Returns</i>

dbVersion as Integer

<p><i>Example</i>

See the example provided with the DatabaseInfo() function.
</pre>
<a name="DatabaseCreationDate"><h4>DatabaseCreationDate</h4>

<pre>dbCreationDate = NSBSystemLib.DatabaseCreationDate()</pre>

Returns the database creation date that was previously
retrieved by a call to DatabaseInfo().  This date is in
system time format.  It is expressed as the number of seconds
since January 1st, 1904.
<pre>
<p><i>Returns</i>

dbCreationDate as Integer

<p><i>Example</i>

See the example provided with the DatabaseInfo() function.
</pre>
See also:  StringDateTime(), StringDate(), StringTime()
<a name="DatabaseModificationDate"><h4>DatabaseModificationDate</h4>

<pre>dbModificationDate = NSBSystemLib.DatabaseModificationDate()</pre>

Returns the database modification date that was previously
retrieved by a call to DatabaseInfo().  This date is in
system time format.  It is expressed as the number of seconds
since January 1st, 1904.
<pre>
<p><i>Returns</i>

dbModificationDate as Integer

<p><i>Example</i>

See the example provided with the DatabaseInfo() function.
</pre>
See also:  StringDateTime(), StringDate(), StringTime()
<a name="DatabaseBackupDate"><h4>DatabaseBackupDate</h4>

<pre>dbBackupDate = NSBSystemLib.DatabaseBackupDate()</pre>

Returns the database backup date that was previously
retrieved by a call to DatabaseInfo().  This date is in
system time format.  It is expressed as the number of seconds
since January 1st, 1904.
<pre>
<p><i>Returns</i>

dbBackupDate as Integer

<p><i>Example</i>

See the example provided with the DatabaseInfo() function.
</pre>
See also:  StringDateTime(), StringDate(), StringTime()
<a name="DatabaseModificationNumber"><h4>DatabaseModificationNumber</h4>

<pre>dbModificationNumber = NSBSystemLib.DatabaseModificationNumber()</pre>

Returns the database modification number that was previously
retrieved by a call to DatabaseInfo().  This number is
incremented every time that a record is added, modified, or
deleted.
<pre>
<p><i>Returns</i>

dbModificationNumber as Integer

<p><i>Example</i>

See the example provided with the DatabaseInfo() function.
</pre>
<a name="DatabaseAppInfoID"><h4>DatabaseAppInfoID</h4>

<pre>dbAppInfoID = NSBSystemLib.DatabaseAppInfoID()</pre>

Returns the LocalID of the database Application Info block
that was previously retrieved by a call to DatabaseInfo().
<pre>
<p><i>Returns</i>

dbAppInfoID as Integer
	0 if this optional block is not available.

<p><i>Example</i>

See the example provided with the DatabaseInfo() function.
</pre>
<a name="DatabaseSortInfoID"><h4>DatabaseSortInfoID</h4>

<pre>dbSortInfoID = NSBSystemLib.DatabaseSortInfoID()</pre>

Returns the LocalID of the database's sort table
that was previously retrieved by a call to DatabaseInfo().
<pre>
<p><i>Returns</i>

dbSortInfoID as Integer
	0 if this optional sort table is not available.

<p><i>Example</i>

See the example provided with the DatabaseInfo() function.
</pre>
<a name="DatabaseType"><h4>DatabaseType</h4>

<pre>dbType = NSBSystemLib.DatabaseType()</pre>

Returns the database type that was previously retrieved
by a call to DatabaseInfo().
<pre>
<p><i>Returns</i>

dbType as Integer

<p><i>Example</i>

See the example provided with the DatabaseInfo() function.
</pre>
See also:  IntToString4()
<a name="DatabaseCreatorID"><h4>DatabaseCreatorID</h4>

<pre>dbCreatorID = NSBSystemLib.DatabaseCreatorID()</pre>

Returns the database Creator ID that was previously retrieved
by a call to DatabaseInfo().
<pre>
<p><i>Returns</i>

dbCreatorID as Integer

<p><i>Example</i>

See the example provided with the DatabaseInfo() function.
</pre>
See also:  IntToString4()
<a name="DatabaseTotalSize"><h4>DatabaseTotalSize</h4>

<pre>dbTotalSize = NSBSystemLib.DatabaseTotalSize(cardNo, dbID)</pre>

Returns the total database size, including overhead, for
the specified card number and database ID.  It also
retrieves the number of records and the size of just the
data in the database.  See the example and notes for
for more information on how to access this data.
<pre><p><i>Parameters</i>

cardNo as Integer
dbID as Integer

<p><i>Returns</i>

dbTotalSize as Integer

<p><i>Example</i>

Dim cardNo as Integer
Dim dbID as Integer
Dim dbTotalSize as Integer
Dim dbNumRecords as Integer
Dim dbDataSize as Integer

cardNo = 0
dbName = "NSBRuntime"
dbID = NSL.FindDatabase(cardNo, dbName)
If dbID &lt;&gt; 0 Then
    dbTotalSize = NSL.DatabaseSize(cardNo, dbID)
    dbNumRecords = NSL.DatabaseNumRecords()
    dbDataSize = NSL.DatabaseDataSize()
EndIf
</pre>
 See also:  DatabaseNumRecords(), DatabaseDataSize()
<a name="DatabaseNumRecords"><h4>DatabaseNumRecords</h4>

<pre>dbNumRecords = NSBSystemLib.DatabaseNumRecords()</pre>

Returns the number of database records that was previously
retrieved by a call to DatabaseTotalSize().
<pre>
<p><i>Returns</i>

dbNumRecords as Integer

<p><i>Example</i>

See the example provided with the DatabaseTotalSize() function.
</pre>
<a name="DatabaseDataSize"><h4>DatabaseDataSize</h4>

<pre>dbDataSize = NSBSystemLib.DatabaseDataSize()</pre>

Returns the database data size (minus overhead) that was
previously retrieved by a call to DatabaseTotalSize().
<pre>
<p><i>Returns</i>

dbDataSize as Integer

<p><i>Example</i>

See the example provided with the DatabaseTotalSize() function.
</pre>
<a name="DeleteDatabase"><h4>DeleteDatabase</h4>

<pre>status = NSBSystemLib.DeleteDatabase(cardNo, dbID)</pre>

Deletes the specified database.
<pre><p><i>Parameters</i>

cardNo as Integer
dbID as Integer

<p><i>Returns</i>

status as Integer
	0 = successful
	257 = memErrChunkLocked
	258 = memErrNotEnoughSpace
	259 = memErrInvalidParam
	517 = dmErrDatabaseOpen
	518 = dmErrCantOpen
	519 = dmErrCantFind
	526 = dmErrROMBased

<p><i>Example</i>

Dim cardNo as Integer
Dim dbID as Integer
Dim status as Integer

cardNo = 0
dbName = "NSBAlarmProxy5"
dbID = NSL.FindDatabase(cardNo, dbName)
If dbID &lt;&gt; 0 Then
    status = NSL.DeleteDatabase(cardNo, dbID)
EndIf
</pre>
 See also:  FindDatabase()
<a name="GetNextDatabaseByTypeCreator"><h4>GetNextDatabaseByTypeCreator</h4>

<pre>dbID = NSBSystemLib.GetNextDatabaseByTypeCreator(newSearch, dbType, dbCreatorID, onlyLatestVersion)</pre>

This function is used to retrieve a list of all the specified
databases on the device.
<pre><p><i>Parameters</i>

newSearch as Integer
	0 = continue searching for databases
	1 = start a new search
dbType as Integer
	Integer database type.
	0 = wildcard search.
dbCreatorID as Integer
	Integer Creator ID.
	0 = wildcard search.
onlyLatestVersion as Integer
	0 = return all versions.
	1 = return only the latest database version for
	    supplied type and Creator ID.

<p><i>Returns</i>

dbID as Integer
	dbID (LocalID) of the database.

<p><i>Example</i>

Dim dbID as Integer
Dim newSearch as Integer
Dim dbType as Integer
Dim dbCreatorID as Integer
Dim onlyLatestVersion as Integer
Dim dbCardNo as Integer
Dim dbName as String

onlyLatestVersion = 0
dbType = NSL.String4ToInt("libr")
dbCreatorID = 0
newSearch = 1
dbID = 1
Do While dbID &lt;&gt; 0
    dbID = NSL.GetNextDatabaseByTypeCreator(newSearch, _
                dbType, dbCreatorID, onlyLatestVersion)
    If dbID &lt;&gt; 0 Then
        dbCardNo = NSL.DatabaseCardNo()
        dbName = NSL.DatabaseInfo(dbCardNo, dbID)
    End If
    newSearch = 0
Loop
</pre>
See Also:  DatabaseCardNo(), DatabaseInfo()
<a name="DatabaseCardNo"><h4>DatabaseCardNo</h4>

<pre>dbCardNo = NSBSystemLib.DatabaseCardNo()</pre>

Returns the database card number that was previously
retrieved by a call to GetNextDatabaseByTypeCreator().
<pre>
<p><i>Returns</i>

dbCardNo as Integer

<p><i>Example</i>

See the example provided with the
GetNextDatabaseByTypeCreator() function.
</pre>
<a name="NumDatabases"><h4>NumDatabases</h4>

<pre>nbr = NSBSystemLib.NumDatabases(cardNo)</pre>

This function is used to retrieve the number of databases
on the specified card number.
<pre><p><i>Parameter</i>

cardNo as Integer

<p><i>Returns</i>

nbr as Integer

<p><i>Example</i>

Dim nbr as Integer
Dim cardNo as Integer

cardNo = 0
nbr = NSL.NumDatabases(cardNo)
</pre>
This routine is helpful for getting a directory of all
databases on a card. The function GetDatabase() accepts
an index from 0 to (NumDatabases -1) and returns a database
ID by index.
See also: GetDatabase()
<a name="NumCards"><h4>NumCards</h4>

<pre>nbr = NSBSystemLib.NumCards()</pre>

This function returns the number of memory card slots in
the system. Not all slots need to be populated.
<pre>
<p><i>Returns</i>

nbr as Integer

<p><i>Example</i>

Dim nbr as Integer
nbr = NSL.NumCards()
</pre>
<a name="GetDatabase"><h4>GetDatabase</h4>

<pre>dbID = NSBSystemLib.GetDatabase(cardNo, index)</pre>

This function is used to retrieve a database ID for the
supplied card number and index.
<pre><p><i>Parameters</i>

cardNo as Integer
index as Integer

<p><i>Returns</i>

dbID as Integer
	0 = Invalid index

<p><i>Example</i>

Dim nbr as Integer
Dim dbID as Integer
Dim cardNo as Integer
Dim index as Integer
Dim dbName as String

cardNo = 0
nbr = NSL.NumDatabases(cardNo)
index = 0
Do While index &lt; nbr
    dbID = NSL.GetDatabase(cardNo, index)
    If dbID &lt;&gt; 0 Then
        dbName = NSL.DatabaseInfo(cardNo, dbID)
    End If
    index = index + 1
Loop
</pre>
See also: NumDatabases()
<a name="SetDatabaseName"><h4>SetDatabaseName</h4>

<pre>status = NSBSystemLib.SetDatabaseName(cardNo, dbID, dbName)</pre>

This function is used to change the name of the specified
database.
<pre><p><i>Parameters</i>

cardNo as Integer
dbID as Integer
dbName as String

<p><i>Returns</i>

status as Integer
	0 = success
	515 = dmErrInvalidParam
	537 = dmErrAlreadyExists
	538 = InvalidDatabaseName

<p><i>Example</i>

Dim status as Integer
Dim dbID as Integer
Dim cardNo as Integer
Dim dbName as String

cardNo = 0
dbName = "NSBAlarmProxy5"
dbID = NSL.FindDatabase(cardNo, dbName)
dbName = "oldNSBAlarmProxy5"
status = NSL.SetDatabaseName(cardNo, dbID, dbName)
</pre>
<a name="SetDatabaseAttributes"><h4>SetDatabaseAttributes</h4>

<pre>status = NSBSystemLib.SetDatabaseAttributes(cardNo, dbID, dbAttributes)</pre>

This function is used to change the attributes of the specified
database.
<pre><p><i>Parameters</i>

cardNo as Integer
dbID as Integer
dbAttributes as Integer
	The attributes value is a bitmapped value.  The following
	list contains the bit mask values available:
	    Bit  0  (0x0001) - dmHdrAttrResDB
	    Bit  1  (0x0002) - dmHdrAttrReadOnly
	    Bit  2  (0x0004) - dmHdrAttrAppInfoDirty
	    Bit  3  (0x0008) - dmHdrAttrBackup
	    Bit  4  (0x0010) - dmhdrAttrOKToInstallNewer
	    Bit  5  (0x0020) - dmHdrAttrResetAfterInstall
	    Bit  6  (0x0040) - dmHdrAttrCopyPrevention
	    Bit  7  (0x0080) - dmHdrAttrStream
	    Bit  8  (0x0100) - dmHdrAttrHidden
	    Bit  9  (0x0200) - hmHdrAttrLaunchableData
	    Bit 15  (0x8000) - dmHdrAttrOpen

<p><i>Returns</i>

status as Integer
	0 = success
	515 = dmErrInvalidParam
	537 = dmErrAlreadyExists
	538 = InvalidDatabaseName

<p><i>Example</i>

Dim status as Integer
Dim dbID as Integer
Dim cardNo as Integer
Dim dbAttributes as Integer

cardNo = 0
dbName = "NSBAlarmProxy5"
dbID = NSL.FindDatabase(cardNo, dbName)
dbAttributes = 2
status = NSL.SetDatabaseAttributes(cardNo, dbID, dbAttributes)
</pre>
<a name="SetDatabaseVersion"><h4>SetDatabaseVersion</h4>

<pre>status = NSBSystemLib.SetDatabaseVersion(cardNo, dbID, dbVersion)</pre>

This function is used to change the version number of the
specified database.
<pre><p><i>Parameters</i>

cardNo as Integer
dbID as Integer
dbVersion as Integer

<p><i>Returns</i>

status as Integer
	0 = success
	515 = dmErrInvalidParam
	537 = dmErrAlreadyExists
	538 = InvalidDatabaseName

<p><i>Example</i>

Dim status as Integer
Dim dbID as Integer
Dim cardNo as Integer
Dim dbVersion as Integer

cardNo = 0
dbName = "NSBAlarmProxy5"
dbID = NSL.FindDatabase(cardNo, dbName)
dbVersion = 6
status = NSL.SetDatabaseVersion(cardNo, dbID, dbVersion)
</pre>
<a name="SetDatabaseCreationDate"><h4>SetDatabaseCreationDate</h4>

<pre>status = NSBSystemLib.SetDatabaseCreationDate(cardNo, dbID, dbCreationDate)</pre>

This function is used to change the creation date of the
specified database.
<pre><p><i>Parameters</i>

cardNo as Integer
dbID as Integer
dbCreationDate as Integer

<p><i>Returns</i>

status as Integer
	0 = success
	515 = dmErrInvalidParam
	537 = dmErrAlreadyExists
	538 = InvalidDatabaseName

<p><i>Example</i>

Dim status as Integer
Dim dbID as Integer
Dim cardNo as Integer
Dim dbCreationDate as Integer

cardNo = 0
dbName = "NSBAlarmProxy5"
dbID = NSL.FindDatabase(cardNo, dbName)
dbCreationDate = NSL.SystemTime("", "", 0, 0)
status = NSL.SetDatabaseCreationDate(cardNo, dbID, _
                                    dbCreationDate)
</pre>
<a name="SetDatabaseModificationDate"><h4>SetDatabaseModificationDate</h4>

<pre>status = NSBSystemLib.SetDatabaseModificationDate(cardNo, dbID, dbModificationDate)</pre>

This function is used to change the modification date of the
specified database.
<pre><p><i>Parameters</i>

cardNo as Integer
dbID as Integer
dbModificationDate as Integer

<p><i>Returns</i>

status as Integer
	0 = success
	515 = dmErrInvalidParam
	537 = dmErrAlreadyExists
	538 = InvalidDatabaseName

<p><i>Example</i>

Dim status as Integer
Dim dbID as Integer
Dim cardNo as Integer
Dim dbModificationDate as Integer

cardNo = 0
dbName = "NSBAlarmProxy5"
dbID = NSL.FindDatabase(cardNo, dbName)
dbModificationDate = NSL.SystemTime("", "", 0, 0)
status = NSL.SetDatabaseModificationDate(cardNo, dbID, _
                                        dbModificationDate)
</pre>
<a name="SetDatabaseBackupDate"><h4>SetDatabaseBackupDate</h4>

<pre>status = NSBSystemLib.SetDatabaseBackupDate(cardNo, dbID, dbBackupDate)</pre>

This function is used to change the backup date of the
specified database.
<pre><p><i>Parameters</i>

cardNo as Integer
dbID as Integer
dbBackupDate as Integer

<p><i>Returns</i>

status as Integer
	0 = success
	515 = dmErrInvalidParam
	537 = dmErrAlreadyExists
	538 = InvalidDatabaseName

<p><i>Example</i>

Dim status as Integer
Dim dbID as Integer
Dim cardNo as Integer
Dim dbBackupDate as Integer

cardNo = 0
dbName = "NSBAlarmProxy5"
dbID = NSL.FindDatabase(cardNo, dbName)
dbBackupDate = NSL.SystemTime("", "", 0, 0)
status = NSL.SetDatabaseModificationDate(cardNo, dbID, _
                                        dbBackupDate)
</pre>
<a name="SetDatabaseModificationNumber"><h4>SetDatabaseModificationNumber</h4>

<pre>status = NSBSystemLib.SetDatabaseModificationNumber(cardNo, dbID, dbModificationNumber)</pre>

This function is used to change the modification number of
the specified database.
<pre><p><i>Parameters</i>

cardNo as Integer
dbID as Integer
dbModificationNumber as Integer

<p><i>Returns</i>

status as Integer
	0 = success
	515 = dmErrInvalidParam
	537 = dmErrAlreadyExists
	538 = InvalidDatabaseName

<p><i>Example</i>

Dim status as Integer
Dim dbID as Integer
Dim cardNo as Integer
Dim dbModificationNumber as Integer

cardNo = 0
dbName = "NSBAlarmProxy5"
dbID = NSL.FindDatabase(cardNo, dbName)
dbModificationNumber = 0
status = NSL.SetDatabaseModificationNumber(cardNo, dbID, _
                                          dbModificationNumber)
</pre>
<a name="SetDatabaseAppInfoID"><h4>SetDatabaseAppInfoID</h4>

<pre>status = NSBSystemLib.SetDatabaseAppInfoID(cardNo, dbID, dbAppInfoID)</pre>

This function is used to change the Application Information
LocalID of the specified database.
<pre><p><i>Parameters</i>

cardNo as Integer
dbID as Integer
dbAppInfoID as Integer

<p><i>Returns</i>

status as Integer
	0 = success
	515 = dmErrInvalidParam
	537 = dmErrAlreadyExists
	538 = InvalidDatabaseName

<p><i>Example</i>

Dim status as Integer
Dim dbID as Integer
Dim cardNo as Integer
Dim dbAppInfoID as Integer

cardNo = 0
dbName = "NSBAlarmProxy5"
dbID = NSL.FindDatabase(cardNo, dbName)
dbAppInfoID = 0
status = NSL.SetDatabaseAppInfoID(cardNo, dbID, _
                                 dbAppInfoID)
</pre>
<a name="SetDatabaseSortInfoID"><h4>SetDatabaseSortInfoID</h4>

<pre>status = NSBSystemLib.SetDatabaseSortInfoID(cardNo, dbID, dbSortInfoID)</pre>

This function is used to change the Sort Table LocalID of
the specified database.
<pre><p><i>Parameters</i>

cardNo as Integer
dbID as Integer
dbSortInfoID as Integer

<p><i>Returns</i>

status as Integer
	0 = success
	515 = dmErrInvalidParam
	537 = dmErrAlreadyExists
	538 = InvalidDatabaseName

<p><i>Example</i>

Dim status as Integer
Dim dbID as Integer
Dim cardNo as Integer
Dim dbSortInfoID as Integer

cardNo = 0
dbName = "NSBAlarmProxy5"
dbID = NSL.FindDatabase(cardNo, dbName)
dbSortInfoID = 0
status = NSL.SetDatabaseSortInfoID(cardNo, dbID, _
                                 dbSortInfoID)
</pre>
<a name="SetDatabaseType"><h4>SetDatabaseType</h4>

<pre>status = NSBSystemLib.SetDatabaseType(cardNo, dbID, dbType)</pre>

This function is used to change the database type of the
specified database.
<pre><p><i>Parameters</i>

cardNo as Integer
dbID as Integer
dbType as Integer

<p><i>Returns</i>

status as Integer
	0 = success
	515 = dmErrInvalidParam
	537 = dmErrAlreadyExists
	538 = InvalidDatabaseName

<p><i>Example</i>

Dim status as Integer
Dim dbID as Integer
Dim cardNo as Integer
Dim dbType as Integer

cardNo = 0
dbName = "NSBAlarmProxy5"
dbID = NSL.FindDatabase(cardNo, dbName)
dbType = String4ToInt("appl")
status = NSL.SetDatabaseType(cardNo, dbID, dbType);
</pre>
<a name="SetDatabaseCreatorID"><h4>SetDatabaseCreatorID</h4>

<pre>status = NSBSystemLib.SetDatabaseCreatorID(cardNo, dbID, dbCreatorID)</pre>

This function is used to change the Creator ID of the
specified database.
<pre><p><i>Parameters</i>

cardNo as Integer
dbID as Integer
dbCreatorID as Integer

<p><i>Returns</i>

status as Integer
	0 = success
	515 = dmErrInvalidParam
	537 = dmErrAlreadyExists
	538 = InvalidDatabaseName

<p><i>Example</i>

Dim status as Integer
Dim dbID as Integer
Dim cardNo as Integer
Dim dbCreatorID as Integer

cardNo = 0
dbName = "NSBAlarmProxy5"
dbID = NSL.FindDatabase(cardNo, dbName)
dbCreatorID = String4ToInt("TEST")
status = NSL.SetDatabaseCreatorID(cardNo, dbID, dbCreatorID);
</pre>
<hr><a name="Event Functions"><h2>Event Functions</h2>
The event functions are provided to give you more control
of event detection and processing than is currently available
using the standard NSBasic Events code section and
SysEventAvailable() function.
<a name="GetEvent"><h4>GetEvent</h4>

<pre>eventType = NSBSystemLib.GetEvent(timeoutTicks, consumePenEvents, returnVirtualEvents)</pre>

Returns an system event type, if one is available.  The
timeoutTicks parameter is used to provide a "non-blocking"
delay.  If an event occurs before the timeout period expires
the function will return immediately.  This can be useful
for use with animation or game programming.
<pre><p><i>Parameters</i>

timeoutTicks as Integer
	The number of system ticks to wait before
			returning.
consumePenEvents as Integer
	0 = do not consume pen events
	1 = consume pen events
	  This function calls the PalmOS EvtGetEvent function.
	  EvtGetEvent removes events from the events queue.  In
	  order for these events to still be available for other
	  processing, this shared library function requeues the
	  events that it detects.  This may not be desired if
	  this function is used for capturing pen events for
	  drawing.  When consumePenEvents is set to 1, the pen
	  events are not requeued but the pen data is still
	  available.
returnVirtualEvents as Integer
	0 = do not return with virtual key events
	1 = return with virtual key events
	  Virtual key events are events generated by the PalmOS
	  system or other third party system level features.
	  These events include things like low battery warning,
	  backlight change of state, etc.  For the most part,
	  virtual key events should not be returned.  If they
	  are returned, it is probably wise to let the system
	  handle them by calling this library's SysHandleEvent()
	  function.

<p><i>Returns</i>

eventType as Integer
	-1 if no event was available within the
			timeout specified.
	0 = nilEvent
	1 = penDownEvent
	      Retrieve pen coordintates with:
	          GlobalX(), and GlobalY()
	2 = penUpEvent
	      Retrieve pen coordintates with:
	          GlobalX(), GlobalY()
	      Retrieve pen stroke coordinates with:
	          GlobalStartX(), GlobalStartY(),
	          GlobalEndX(), and GlobalEndY()
	3 = penMoveEvent
	      Retrieve pen coordintates with:
	          GlobalX(), and GlobalY()
	4 = keyDownEvent
	      Retrieve key data with:
	          KeyEventChr(), KeyEventKeyCode(),
	          and KeyEventModifiers()
	5 = winEnterEvent
	6 = winExitEvent
	7 = ctlEnterEvent
	8 = ctlExitEvent
	9 = ctlSelectEvent
	10 = ctlRepeatEvent
	11 = lstEnterEvent
	12 = lstSelectEvent
	13 = lstExitEvent
	14 = popSelectEvent
	15 = fldEnterEvent
	16 = fldHeightChangedEvent
	17 = fldChangedEvent
	18 = tblEnterEvent
	19 = tblSelectEvent
	20 = daySelectEvent
	21 = menuEvent
	22 = appStopEvent
	21 = frmOpenEvent
	22 = frmGotoEvent
	23 = frmUpdateEvent
	24 = frmSaveEvent
	25 = frmCloseEvent
	26 = frmTitleEnterEvent
	27 = frmTitleSelectEvent
	28 = tblExitEvent
	29 = sclEnterEvent
	30 = sclExitEvent
	31 = sclRepeatEvent
	35 = tsmConfirmEvent
	36 = tsmFepButtonEvent
	37 = tsmFepModeEvent
	
	2048 = menuCmdBarOpenEvent
	2049 = menuOpenEvent
	2050 = menuCloseEvent
	2051 = frmGadgetEnterEvent
	2052 = frmGadgetMiscEvent
	
	4096 = firstINetLibEvent
	4352 = firstWebLibEvent
	
	24576 = firstUserEvent

<p><i>Example</i>

Dim eventType as Integer
Dim timeoutTicks as Integer

NSL.FlushEvents()
eventType = 0
Do While eventType &lt;= 0
    'do something
    eventType = NSL.GetEvent(timeoutTicks, 0, 0)
Loop
</pre>
If this function is used as part of a button's event code,
you may want to flush pending key and pen events before
calling this function.  This is because the "pen up" event
resulting from the button push will cause this function to
to return immediately.  See the example and FlushEvents()
function.
<br><br>
<a name="SysHandleEvent"><h4>SysHandleEvent</h4>

<pre>NSBSystemLib.SysHandleEvent()</pre>

Consume and handle the event most recently returned
by the GetEvent() function.  It does this by calling
EvtGetEvent() and then SysHandleEvent();
<pre>
<p><i>Example</i>

NSL.SysHandleEvent()
</pre>
<a name="FlushEvents"><h4>FlushEvents</h4>

<pre>NSBSystemLib.FlushEvents()</pre>

Flushes all pending key and pen events.  It does this by
calling the PalmOS EvtFlushKeyQueue() and
EvtFlushPenQueue() functions.  It then empties and handles
all remaing events by calling EvtGetEvent() and
SysHandleEvent().
<pre>
<p><i>Example</i>

NSL.FlushEvents()
</pre>
<a name="KeyEventChr"><h4>KeyEventChr</h4>

<pre>keyChr = NSBSystemLib.KeyEventChr()</pre>

Returns the "chr" data member of of a key event.  The
GetEvent() function must have returned an event type of
4 (keyDownEvent) for this value to be valid.
<pre>
<p><i>Returns</i>

keyChr as Integer

<p><i>Example</i>

Dim keyChr as Integer
keyChr = NSL.KeyEventChr()
</pre>
<a name="KeyEventKeyCode"><h4>KeyEventKeyCode</h4>

<pre>keyCode = NSBSystemLib.KeyEventKeyCode()</pre>

Returns the "keyCode" data member of of a key event.  The
GetEvent() function must have returned an event type of
4 (keyDownEvent) for this value to be valid.
<pre>
<p><i>Returns</i>

keyCode as Integer

<p><i>Example</i>

Dim keyCode as Integer
keyCode = NSL.KeyEventKeyCode()
</pre>
<a name="KeyEventModifiers"><h4>KeyEventModifiers</h4>

<pre>modifiers = NSBSystemLib.KeyEventModifiers()</pre>

Returns the "modifiers" data member of of a key event.  The
GetEvent() function must have returned an event type of
4 (keyDownEvent) for this value to be valid.
<pre>
<p><i>Returns</i>

modifiers as Integer

<p><i>Example</i>

Dim modifiers as Integer
modifiers = NSL.KeyEventModifiers()
</pre>
<hr><a name="Field and Form Functions"><h2>Field and Form Functions</h2>
The field and form functions provide convenient methods for
manipulating field and form objects.  These functions allow
you to perform operations that aren't available using the
standard NSBasic language.  While many of these operations
can be performed with SysTrapSub and SysTrapFunc statements,
these functions provide a simpler interface.
<a name="ControlHitControl"><h4>ControlHitControl</h4>

<pre>NSBSystemLib.ControlHitControl objID</pre>

Simulate tapping a control. This function adds a
ctlSelectEvent to the event queue.
<pre><p><i>Parameter:</i>

objID as Integer
	0 = use field that currently has focus
	    objID may be either an Object ID or an Object Index.
	    If the value of objID is between 1 and the number of
	    objects on the form, objID is assumed to be an Object
	    Index, otherwise, it is assumed to be an Object ID.

<p><i>Example</i>

Dim objID as Integer

objID = 1008
NSL.ControlHitControl objID
</pre>
<a name="FieldCopy"><h4>FieldCopy</h4>

<pre>NSBSystemLib.FieldCopy objID</pre>

Copy the current selection to the text clipboard.
<pre><p><i>Parameter:</i>

objID as Integer
	0 = use field that currently has focus
	    objID may be either an Object ID or an Object Index.
	    If the value of objID is between 1 and the number of
	    objects on the form, objID is assumed to be an Object
	    Index, otherwise, it is assumed to be an Object ID.

<p><i>Example</i>

Dim objID as Integer

objID = 1008
NSL.FieldCopy objID
</pre>
<a name="FieldCut"><h4>FieldCut</h4>

<pre>NSBSystemLib.FieldCut objID</pre>

Copy the current selection to the text clipboard, delete
the selection from the field, and redraw the field.
<pre><p><i>Parameter:</i>

objID as Integer
	0 = use field that currently has focus
	    objID may be either an Object ID or an Object Index.
	    If the value of objID is between 1 and the number of
	    objects on the form, objID is assumed to be an Object
	    Index, otherwise, it is assumed to be an Object ID.

<p><i>Example</i>

Dim objID as Integer

objID = 1008
NSL.FieldCut objID
</pre>
<a name="FieldInsert"><h4>FieldInsert</h4>

<pre>NSBSystemLib.FieldInsert objID, insString</pre>

Replace the current selection if any with the specified
string and redraw the field.
<pre><p><i>Parameters</i>

objID as Integer
	0 = use field that currently has focus
	    objID may be either an Object ID or an Object Index.
	    If the value of objID is between 1 and the number of
	    objects on the form, objID is assumed to be an Object
	    Index, otherwise, it is assumed to be an Object ID.

insString as String

<p><i>Example</i>

Dim objID as Integer
Dim insString as String

objID = 1008
insString = "Insert This!"
NSL.FieldInsert objID, insString
</pre>
<a name="FieldPaste"><h4>FieldPaste</h4>

<pre>NSBSystemLib.FieldPaste objID</pre>

Replace the current selection in the field, if any, with the
contents of the text clipboard.
<pre><p><i>Parameter:</i>

objID as Integer
	0 = use field that currently has focus
	    objID may be either an Object ID or an Object Index.
	    If the value of objID is between 1 and the number of
	    objects on the form, objID is assumed to be an Object
	    Index, otherwise, it is assumed to be an Object ID.

<p><i>Example</i>

Dim objID as Integer

objID = 1008
NSL.FieldPaste objID
</pre>
<a name="FieldUndo"><h4>FieldUndo</h4>

<pre>NSBSystemLib.FieldUndo objID</pre>

Undo the last change made to the field object, if any.
Changes include paste and cut.
<pre><p><i>Parameter:</i>

objID as Integer
	0 = use field that currently has focus
	    objID may be either an Object ID or an Object Index.
	    If the value of objID is between 1 and the number of
	    objects on the form, objID is assumed to be an Object
	    Index, otherwise, it is assumed to be an Object ID.

<p><i>Example</i>

Dim objID as Integer

objID = 1008
NSL.FieldUndo objID
</pre>
<a name="FieldGetInsPtPosition"><h4>FieldGetInsPtPosition</h4>

<pre>pos = NSBSystemLib.FieldGetInsPtPosition(objID)</pre>

Returns the insertion point position within the string.
<pre><p><i>Parameter</i>

objID as Integer
	0 = use field that currently has focus
	    objID may be either an Object ID or an Object Index.
	    If the value of objID is between 1 and the number of
	    objects on the form, objID is assumed to be an Object
	    Index, otherwise, it is assumed to be an Object ID.

<p><i>Returns</i>

pos as Integer

<p><i>Example</i>

Dim pos as Integer
Dim objID as Integer

objID = 1008
pos = NSL.FieldGetInsPtPosition(objID)
</pre>
The insertion point is to the left of the byte offset that
this function returns. That is, if this function returns 0,
the insertion point is to the left of the first character
in the string. In multiline fields, line feeds are counted
as a single character in the string, and the byte offset
after the line feed character is the beginning of the next
line.
See also: FieldSetInsertionPoint() and FieldSetInsPtPosition()
<a name="FieldGetSelection"><h4>FieldGetSelection</h4>

<pre>startPos = NSBSystemLib.FieldGetSelection(objID)</pre>

Retrieves the start and end position of a field's selected
text.  It only returns the start position.  To get the end
position, use the GlobalEndPos() funtion.
<pre><p><i>Parameter</i>

objID as Integer
	0 = use field that currently has focus
	    objID may be either an Object ID or an Object Index.
	    If the value of objID is between 1 and the number of
	    objects on the form, objID is assumed to be an Object
	    Index, otherwise, it is assumed to be an Object ID.

<p><i>Returns</i>

startPos as Integer

<p><i>Example</i>

Dim startPos as Integer
Dim objID as Integer
Dim endPos as Integer

objID = 1008
startPos = NSL.FieldGetSelection(objID)
endPos = NSL.GlobalEndPos()
</pre>
<a name="FieldAnyDirty"><h4>FieldAnyDirty</h4>

<pre>dirty = NSBSystemLib.FieldAnyDirty()</pre>

Returns 1 if one or more of the active form's field values
have changed since the last time that they were set.
<pre>
<p><i>Returns</i>

dirty as Integer

<p><i>Example</i>

Dim dirty as Integer
dirty = NSL.FieldAnyDirty()
</pre>
<a name="FieldDirty"><h4>FieldDirty</h4>

<pre>dirty = NSBSystemLib.FieldDirty(objID)</pre>

Returns 1 if the field's value has changed since the last
time that it was set.
<pre><p><i>Parameter</i>

objID as Integer
	0 = check field that currently has focus
	    objID may be either an Object ID or an Object Index.
	    If the value of objID is between 1 and the number of
	    objects on the form, objID is assumed to be an Object
	    Index, otherwise, it is assumed to be an Object ID.

<p><i>Returns</i>

dirty as Integer

<p><i>Example</i>

Dim dirty as Integer
Dim objID as Integer

objID = 1008
dirty = NSL.FieldDirty(objID)
</pre>
<a name="FieldSetDirty"><h4>FieldSetDirty</h4>

<pre>NSBSystemLib.FieldSetDirty objID, dirty</pre>

Sets a field's "dirty" property.  A field is considered as
dirty if its value has changed since the last time it was
set.
<pre><p><i>Parameters</i>

objID as Integer
	0 = use field that currently has focus
	    objID may be either an Object ID or an Object Index.
	    If the value of objID is between 1 and the number of
	    objects on the form, objID is assumed to be an Object
	    Index, otherwise, it is assumed to be an Object ID.

dirty as Integer
	0 = not dirty
	1 = dirty

<p><i>Example</i>

Dim objID as Integer
Dim dirty as Integer

objID = 1008
dirty = 1
NSL.FieldSetDirty objID, dirty
</pre>
<a name="FieldSetAllDirty"><h4>FieldSetAllDirty</h4>

<pre>NSBSystemLib.FieldSetAllDirty dirty</pre>

Sets the "dirty" property of all of the active form's field
values.
<pre><p><i>Parameter:</i>

dirty as Integer
	0 = not dirty
	1 = dirty

<p><i>Example</i>

Dim dirty as Integer
NSL.FieldSetAllDirty dirty
</pre>
<a name="FieldSetSelection"><h4>FieldSetSelection</h4>

<pre>NSBSystemLib.FieldSetSelection objID, startPos, endPos</pre>

Set the current selection in a field and highlight the
selection if the field is visible.
<pre><p><i>Parameters</i>

objID as Integer
	0 = use field that currently has focus
	    objID may be either an Object ID or an Object Index.
	    If the value of objID is between 1 and the number of
	    objects on the form, objID is assumed to be an Object
	    Index, otherwise, it is assumed to be an Object ID.

startPos as Integer

endPos as Integer

<p><i>Example</i>

Dim objID as Integer
Dim startPos as Integer
Dim endPos as Integer

objID = 1008
NSL.FieldSetSelection objID, startPos, endPos
</pre>
<a name="FieldSetInsertionPoint"><h4>FieldSetInsertionPoint</h4>

<pre>NSBSystemLib.FieldSetInsertionPoint objID, pos</pre>

Set the location of the insertion point based on a
specified string position.
<pre><p><i>Parameters</i>

objID as Integer
	0 = use field that currently has focus
	    objID may be either an Object ID or an Object Index.
	    If the value of objID is between 1 and the number of
	    objects on the form, objID is assumed to be an Object
	    Index, otherwise, it is assumed to be an Object ID.

pos as Integer

<p><i>Example</i>

Dim objID as Integer
Dim pos as Integer

objID = 1008
NSL.FieldSetInsertionPoint objID, pos
</pre>
This routine differs from FieldldSetInsPtPosition in
that it doesn't make the character position visible.
FieldSetInsertionPoint also doesn't make the field the
current focus of input if it was not already.
See Also:  FieldSetInsPtPosition() and FieldGetInsPtPosition()
<a name="FieldSetInsPtPosition"><h4>FieldSetInsPtPosition</h4>

<pre>NSBSystemLib.FieldSetInsPtPosition objID, pos</pre>

Set the location of the insertion point based on a
specified string position.
<pre><p><i>Parameters</i>

objID as Integer
	0 = use field that currently has focus
	    objID may be either an Object ID or an Object Index.
	    If the value of objID is between 1 and the number of
	    objects on the form, objID is assumed to be an Object
	    Index, otherwise, it is assumed to be an Object ID.

pos as Integer

<p><i>Example</i>

Dim objID as Integer
Dim pos as Integer

objID = 1008
NSL.FieldSetInsPtPosition objID, pos
</pre>
If the position is beyond the visible text, the field is
scrolled until the position is visible.
See also:  FieldSetInsertionPoint() and FieldGetInsPtPosition()
<a name="FieldGetAttributes"><h4>FieldGetAttributes</h4>

<pre>attributes = NSBSystemLib.FieldGetAttributes(objID)</pre>

Returns a field's attributes as a bitmapped integer.  The
BitsNbytes shared library contains functions for manipulating
bit values.
<pre><p><i>Parameter</i>

objID as Integer
	0 = use field that currently has focus
	    objID may be either an Object ID or an Object Index.
	    If the value of objID is between 1 and the number of
	    objects on the form, objID is assumed to be an Object
	    Index, otherwise, it is assumed to be an Object ID.

<p><i>Returns</i>

attributes as Integer
	A bitmapped integer with the following values:
	   bit 0 - reserved
	   bit 1 - numeric
	   bit 2 - hasScrollBar
	   bit 3 - autoShift
	   bits 4 and 5 - justification
	       00 - leftAlign
	       01 - centerAlign (may not be supported)
	       10 - rightAlign
	   bits 6 and 7 - underlined
	       00 - noUnderline
	       01 - grayUnderline
	       10 - solidUnderline
	   bit 8 - dirty
	   bit 9 - insPtVisible
	   bit 10 - dynamicSize
	   bit 11 - hasFocus
	   bit 12 - singleLine
	   bit 13 - editable
	   bit 14 - visible
	   bit 15 - usable

<p><i>Example</i>

Dim attributes as Integer
Dim objID as Integer

objID = 1008
attributes = NSL.FieldGetAttributes(objID)
</pre>
<a name="FieldSetAttributes"><h4>FieldSetAttributes</h4>

<pre>NSBSystemLib.FieldSetAttributes objID, attributes</pre>

Sets a field's attributes.  Attributes are specified as a
bitmapped integer.  The BitsNbytes shared library contains
functions for manipulating bit values.
<pre><p><i>Parameters</i>

objID as Integer
	0 = use field that currently has focus
	    objID may be either an Object ID or an Object Index.
	    If the value of objID is between 1 and the number of
	    objects on the form, objID is assumed to be an Object
	    Index, otherwise, it is assumed to be an Object ID.

attributes as Integer
	A bitmapped integer with the following values:
	   bit 0 - reserved
	   bit 1 - numeric
	   bit 2 - hasScrollBar
	   bit 3 - autoShift
	   bits 4 and 5 - justification
	       00 - leftAlign
	       01 - centerAlign (may not be supported)
	       10 - rightAlign
	   bits 6 and 7 - underlined
	       00 - noUnderline
	       01 - grayUnderline
	       10 - solidUnderline
	   bit 8 - dirty
	   bit 9 - insPtVisible
	   bit 10 - dynamicSize
	   bit 11 - hasFocus
	   bit 12 - singleLine
	   bit 13 - editable
	   bit 14 - visible
	   bit 15 - usable

<p><i>Example</i>

Dim objID as Integer
Dim attributes as Integer

objID = 1008
NSL.FieldSetAttributes objID, attributes
</pre>
<a name="FieldGetFont"><h4>FieldGetFont</h4>

<pre>fontId = NSBSystemLib.FieldGetFont(objID)</pre>

Returns a field's Font ID.
<pre><p><i>Parameter</i>

objID as Integer
	0 = use field that currently has focus
	    objID may be either an Object ID or an Object Index.
	    If the value of objID is between 1 and the number of
	    objects on the form, objID is assumed to be an Object
	    Index, otherwise, it is assumed to be an Object ID.

<p><i>Returns</i>

fontId as Integer

<p><i>Example</i>

Dim fontId as Integer
Dim objID as Integer

objID = 1008
fontId = NSL.FieldGetFont(objID)
</pre>
<a name="FieldSetFont"><h4>FieldSetFont</h4>

<pre>NSBSystemLib.FieldSetFont objID, fontId</pre>

Sets a field's Font ID.
<pre><p><i>Parameters</i>

objID as Integer
	0 = use field that currently has focus
	    objID may be either an Object ID or an Object Index.
	    If the value of objID is between 1 and the number of
	    objects on the form, objID is assumed to be an Object
	    Index, otherwise, it is assumed to be an Object ID.

fontId as Integer

<p><i>Example</i>

Dim objID as Integer
Dim fontId as Integer

objID = 1008
fontId = 2  'large font
NSL.FieldSetFont objID, fontId
</pre>
<a name="FieldGetScrollPosition"><h4>FieldGetScrollPosition</h4>

<pre>position = NSBSystemLib.FieldGetScrollPosition(objID)</pre>

Returns a field's scroll position.  This is the offset of
the first character in the first visible line of a field.
<pre><p><i>Parameter</i>

objID as Integer
	0 = use field that currently has focus
	    objID may be either an Object ID or an Object Index.
	    If the value of objID is between 1 and the number of
	    objects on the form, objID is assumed to be an Object
	    Index, otherwise, it is assumed to be an Object ID.

<p><i>Returns</i>

position as Integer

<p><i>Example</i>

Dim position as Integer
Dim objID as Integer

objID = 1008
position = NSL.FieldGetScrollPosition(objID)
</pre>
<a name="FieldSetScrollPosition"><h4>FieldSetScrollPosition</h4>

<pre>NSBSystemLib.FieldSetScrollPosition objID, position</pre>

Sets a field's scroll position.  This is the offset of
the first character in the first visible line of a field.
<pre><p><i>Parameters</i>

objID as Integer
	0 = use field that currently has focus
	    objID may be either an Object ID or an Object Index.
	    If the value of objID is between 1 and the number of
	    objects on the form, objID is assumed to be an Object
	    Index, otherwise, it is assumed to be an Object ID.

position as Integer

<p><i>Example</i>

Dim objID as Integer
Dim position as Integer

objID = 1008
position = 20
NSL.FieldSetScrollPosition objID, position
</pre>
<a name="FieldGetScrollValues"><h4>FieldGetScrollValues</h4>

<pre>totalLines = NSBSystemLib.FieldGetScrollValues(objID)</pre>

Returns a field's scroll values.  These are the values
necessary to update a scroll bar.  This function retreives the
scroll position (offset line number), the text height (total lines required to display
the field's text), and the field's height.  Only the text height
(total lines) is returned.  Use GlobalStartPos() to return the
scroll position and GlobalHeight() to return the field's height.
<pre><p><i>Parameter</i>

objID as Integer
	0 = use field that currently has focus
	    objID may be either an Object ID or an Object Index.
	    If the value of objID is between 1 and the number of
	    objects on the form, objID is assumed to be an Object
	    Index, otherwise, it is assumed to be an Object ID.

<p><i>Returns</i>

totalLines as Integer

<p><i>Example</i>

Dim totalLines as Integer
Dim objID as Integer
Dim position as Integer
Dim height as Integer

objID = 1008
totalLines = NSL.FieldGetScrollValues(objID)
position = GlobalStartPos()
height = GlobalHeight()
</pre>
<a name="FieldGetVisibleLines"><h4>FieldGetVisibleLines</h4>

<pre>lines = NSBSystemLib.FieldGetVisibleLines(objID)</pre>

Return the number of lines that can be displayed within
the visible bounds of the field.
<pre><p><i>Parameter</i>

objID as Integer
	0 = use field that currently has focus
	    objID may be either an Object ID or an Object Index.
	    If the value of objID is between 1 and the number of
	    objects on the form, objID is assumed to be an Object
	    Index, otherwise, it is assumed to be an Object ID.

<p><i>Returns</i>

lines as Integer

<p><i>Example</i>

Dim lines as Integer
Dim objID as Integer

objID = 1008
lines = NSL.FieldGetVisibleLines(objID)
</pre>
<a name="FieldGetNumberOfBlankLines"><h4>FieldGetNumberOfBlankLines</h4>

<pre>lines = NSBSystemLib.FieldGetNumberOfBlankLines(objID)</pre>

Return the number of blank lines that are displayed at the
bottom of a field.
<pre><p><i>Parameter</i>

objID as Integer
	0 = use field that currently has focus
	    objID may be either an Object ID or an Object Index.
	    If the value of objID is between 1 and the number of
	    objects on the form, objID is assumed to be an Object
	    Index, otherwise, it is assumed to be an Object ID.

<p><i>Returns</i>

lines as Integer

<p><i>Example</i>

Dim lines as Integer
Dim objID as Integer

objID = 1008
lines = NSL.FieldGetNumberOfBlankLines(objID)
</pre>
<a name="FieldScrollable"><h4>FieldScrollable</h4>

<pre>yesNo = NSBSystemLib.FieldScrollable(objID, direction)</pre>

Returns 1 if the field is scrollable in the specified
direction.  Otherwise, it returns 0
<pre><p><i>Parameters</i>

objID as Integer
	0 = use field that currently has focus
	    objID may be either an Object ID or an Object Index.
	    If the value of objID is between 1 and the number of
	    objects on the form, objID is assumed to be an Object
	    Index, otherwise, it is assumed to be an Object ID.
direction as Integer
	0 = up
	1 = down

<p><i>Returns</i>

yesNo as Integer

<p><i>Example</i>

Dim yesNo as Integer
Dim objID as Integer
Dim direction as Integer

objID = 1008
yesNo = NSL.FieldScrollable(objID, direction)
</pre>
<a name="FieldScrollField"><h4>FieldScrollField</h4>

<pre>NSBSystemLib.FieldScrollField objID, nbrLines, direction</pre>

Scroll a field up or down by the number of lines specified.
<pre><p><i>Parameters</i>

objID as Integer
	0 = use field that currently has focus
	    objID may be either an Object ID or an Object Index.
	    If the value of objID is between 1 and the number of
	    objects on the form, objID is assumed to be an Object
	    Index, otherwise, it is assumed to be an Object ID.

nbrLines as Integer

direction as Integer
	0 = up
	1 = down

<p><i>Example</i>

Dim objID as Integer
Dim nbrLines as Integer
Dim direction as Integer

objID = 1008
NSL.FieldScrollField objID, nbrLines, direction
</pre>
<a name="FieldSetBounds"><h4>FieldSetBounds</h4>

<pre>NSBSystemLib.FieldSetBounds objID, topLeftX, topLeftY, width, height</pre>

Change the position or size of a field.
<pre><p><i>Parameters</i>

objID as Integer
	0 = use field that currently has focus
	    objID may be either an Object ID or an Object Index.
	    If the value of objID is between 1 and the number of
	    objects on the form, objID is assumed to be an Object
	    Index, otherwise, it is assumed to be an Object ID.

topLeftX as Integer

topLeftY as Integer

width as Integer

height as Integer

<p><i>Example</i>

Dim objID as Integer
Dim topLeftX as Integer
Dim topLeftY as Integer
Dim width as Integer
Dim height as Integer

objID = 1008
NSL.FieldSetBounds objID, topLeftX, topLeftY, width, height
</pre>
May raise a fatal error message if the memory block that contains the word-wrapping information needs to be resized and there is not enough space to do so.
<a name="FormGetNumberOfObjects"><h4>FormGetNumberOfObjects</h4>

<pre>nbr = NSBSystemLib.FormGetNumberOfObjects()</pre>

Retrieves the number of objects on the active form.
<pre>
<p><i>Returns</i>

nbr as Integer
	-1 if no form is active

<p><i>Example</i>

Dim nbr as Integer
nbr = NSL.FormGetNumberOfObjects()
</pre>
<a name="FormGetObjectBounds"><h4>FormGetObjectBounds</h4>

<pre>x = NSBSystemLib.FormGetObjectBounds(objID)</pre>

Retrieves the x, y, width, and height values of a form
object.
<pre><p><i>Parameter</i>

objID as Integer
	0 = use object that currently has focus
	    objID may be either an Object ID or an Object Index.
	    If the value of objID is between 1 and the number of
	    objects on the form, objID is assumed to be an Object
	    Index, otherwise, it is assumed to be an Object ID.

<p><i>Returns</i>

x as Integer
	-1 if the object is invalid or no object has focus

<p><i>Example</i>

Dim x as Integer
Dim objID as Integer
Dim y as Integer
Dim width as Integer
Dim height as Integer

objID = 1008
x = NSL.FormGetObjectBounds(objID)
y = NSL.GlobalY()
width = NSL.GlobalWidth()
height = NSL.GlobalHeight()
</pre>
This function only returns the x position.  Use
the GlobalY(), GlobalWidth(), and GlobalHeight() functions
to retrieve the other values.
<a name="FormGetObjectPosition"><h4>FormGetObjectPosition</h4>

<pre>x = NSBSystemLib.FormGetObjectPosition(objID)</pre>

Retrieves the starting X and Y position values of a form
object.
<pre><p><i>Parameter</i>

objID as Integer
	0 = use object that currently has focus
	    objID may be either an Object ID or an Object Index.
	    If the value of objID is between 1 and the number of
	    objects on the form, objID is assumed to be an Object
	    Index, otherwise, it is assumed to be an Object ID.

<p><i>Returns</i>

x as Integer
	-1 if the object is invalid or no object has focus

<p><i>Example</i>

Dim x as Integer
Dim objID as Integer
Dim y as Integer

objID = 1008
x = NSL.FormGetObjectPosition(objID)
y = NSL.GlobalY
</pre>
This function only returns the X position.  Use the
GlobalY(), function to retrieve the Y position.
<a name="FormGetObjectType"><h4>FormGetObjectType</h4>

<pre>type = NSBSystemLib.FormGetObjectType(objID)</pre>

Retrieves the object type of the specified object.
<pre><p><i>Parameter</i>

objID as Integer
	0 = use object that currently has focus
	    objID may be either an Object ID or an Object Index.
	    If the value of objID is between 1 and the number of
	    objects on the form, objID is assumed to be an Object
	    Index, otherwise, it is assumed to be an Object ID.

<p><i>Returns</i>

type as Integer
	-1 if the object is invalid or no object has focus
	 0 = frmFieldObj
	 1 = frmControlObj
	 2 = frmListObj
	 3 = frmTableObj
	 4 = frmBitmapObj
	 5 = frmLineObj
	 6 = frmFrameObj
	 7 = frmRectangleObj
	 8 = frmLabelObj
	 9 = frmTitleObj
	10 = frmPopupObj
	11 = frmGraffitiStateObj
	12 = frmGadgetObj
	13 = frmScrollbarObj

<p><i>Example</i>

Dim type as Integer
Dim objID as Integer
objID = 1008
type = NSL.FormGetObjectType(objID)
</pre>
This function does not provide information regarding all the
different Control object types.  To retrieve a complete list of
object types use the FormGetAllObjectTypes() function.
<a name="FormSetObjectPosition"><h4>FormSetObjectPosition</h4>

<pre>NSBSystemLib.FormSetObjectPosition objID, x, y</pre>

Changes an object's current position.
<pre><p><i>Parameters</i>

objID as Integer
	0 = use object that currently has focus
	    objID may be either an Object ID or an Object Index.
	    If the value of objID is between 1 and the number of
	    objects on the form, objID is assumed to be an Object
	    Index, otherwise, it is assumed to be an Object ID.

x as Integer

y as Integer

<p><i>Example</i>

Dim objID as Integer
Dim x as Integer
Dim y as Integer

objID = 1008
x = 120
y = 40
NSL.FormSetObjectPosition objID, x, y
</pre>
<a name="FormSetObjectBounds"><h4>FormSetObjectBounds</h4>

<pre>NSBSystemLib.FormSetObjectBounds objID, topLeftX, topLeftY, width, height</pre>

Set the bounds or position of an object.
<pre><p><i>Parameters</i>

objID as Integer
	0 = use object that currently has focus
	    objID may be either an Object ID or an Object Index.
	    If the value of objID is between 1 and the number of
	    objects on the form, objID is assumed to be an Object
	    Index, otherwise, it is assumed to be an Object ID.

topLeftX as Integer

topLeftY as Integer

width as Integer

height as Integer

<p><i>Example</i>

Dim objID as Integer
Dim topLeftX as Integer
Dim topLeftY as Integer
Dim width as Integer
Dim height as Integer

objID = 1008
NSL.FormSetObjectBounds objID, topLeftX, topLeftY, width, height
</pre>
<a name="FormGetTitle"><h4>FormGetTitle</h4>

<pre>title = NSBSystemLib.FormGetTitle()</pre>

Returns the form's current title.
<pre>
<p><i>Returns</i>

title as String

<p><i>Example</i>

Dim title as String
title = NSL.FormGetTitle()
</pre>
<a name="FormReplaceTitle"><h4>FormReplaceTitle</h4>

<pre>NSBSystemLib.FormReplaceTitle title, forceLength</pre>

Replace the current form's title.  The length of the title
string can not exceed the original title string length.  If
the forceLength parameter is 0, then the replacement string
will automatically be truncated to the current title length.
If you will vary the length of your title string, you should
use the FormGetTitle() function to retrieve the original title
string before you ever change it.  Then obtain its length using
the NSBasic Len() function.  Use this value as the forceLength
parameter for all subsequent title replacements.
<pre><p><i>Parameters</i>

title as String

forceLength as Integer

<p><i>Example</i>

Dim title as String
Dim forceLength as Integer

NSL.FormReplaceTitle title, forceLength
</pre>
<a name="ListGetTopItem"><h4>ListGetTopItem</h4>

<pre>topItem = NSBSystemLib.ListGetTopItem(objID)</pre>

Returns the top item number of the specified list box.
<pre><p><i>Parameter</i>

objID as Integer

<p><i>Returns</i>

topItem as Integer

<p><i>Example</i>

Dim topItem as Integer
Dim objID as Integer

topItem = NSL.ListGetTopItem(objID)
</pre>
<a name="ListSetTopItem"><h4>ListSetTopItem</h4>

<pre>NSBSystemLib.ListSetTopItem objID, topItem</pre>

Sets the top item number of the specified list box.  The
item cannot become the top item if it's on the last page.
<pre><p><i>Parameters</i>

objID as Integer

topItem as Integer

<p><i>Example</i>

Dim objID as Integer
Dim topItem as Integer

NSL.ListSetTopItem objID, topItem
</pre>
<a name="ListGetVisibleItems"><h4>ListGetVisibleItems</h4>

<pre>visibleItems = NSBSystemLib.ListGetVisibleItems(objID)</pre>

Returns the number of visible items in the specified list box.
<pre><p><i>Parameter</i>

objID as Integer

<p><i>Returns</i>

visibleItems as Integer

<p><i>Example</i>

Dim visibleItems as Integer
Dim objID as Integer

visibleItems = NSL.ListGetVisibleItems(objID)
</pre>
<a name="ListScrollList"><h4>ListScrollList</h4>

<pre>result = NSBSystemLib.ListScrollList(objID, direction, nbrItems)</pre>

Scroll the specified list box by the number of items and
in the direction indicated.
<pre><p><i>Parameters</i>

objID as Integer
direction as Integer
	0 = up
	1 = down
nbrItems as Integer

<p><i>Returns</i>

result as Integer
	0 = if the list box could not be scrolled
	1 = if the list box was scrolled successfully

<p><i>Example</i>

Dim result as Integer
Dim objID as Integer
Dim direction as Integer
Dim nbrItems as Integer

result = NSL.ListScrollList(objID, direction, nbrItems)
</pre>
<hr><a name="Font Support"><h2>Font Support</h2>
The Font Support functions provide support for determining
and changing the default font.  They also provide support
for working with the PalmOS variable width fonts.
<a name="FontGetFont"><h4>FontGetFont</h4>

<pre>fontId = NSBSystemLib.FontGetFont()</pre>

Return the Font ID of the current font.
<pre>
<p><i>Returns</i>

fontId as Integer

<p><i>Example</i>

Dim fontId as Integer
fontId = NSL.FontGetFont()
</pre>
<a name="FontSetFont"><h4>FontSetFont</h4>

<pre>oldFontId = NSBSystemLib.FontSetFont(fontId)</pre>

Set the current font.
<pre><p><i>Parameter</i>

fontId as Integer

<p><i>Returns</i>

oldFontId as Integer

<p><i>Example</i>

Dim oldFontId as Integer
Dim fontId as Integer

oldFontId = NSL.FontSetFont(fontId)
</pre>
<a name="FontSelect"><h4>FontSelect</h4>

<pre>fontId = NSBSystemLib.FontSelect()</pre>

Displays a dialog box in which the user can choose one of
three system-supplied fonts, and returns a FontID value
representing the user's choice.
<pre>
<p><i>Returns</i>

fontId as Integer

<p><i>Example</i>

Dim fontId as Integer
fontId = NSL.FontSelect()
</pre>
<a name="FontCharWidth"><h4>FontCharWidth</h4>

<pre>width = NSBSystemLib.FontCharWidth(charString)</pre>

Return the width of the specified character. If the specified
character does not exist within the current font, the Missing
Character Symbol is substituted.
<br><br>
Note:  Even though the parameter to this function is a string,
       only the first character of the string is evaluated.
<pre><p><i>Parameter</i>

charString as String

<p><i>Returns</i>

width as Integer

<p><i>Example</i>

Dim width as Integer
Dim charString as String

width = NSL.FontCharWidth(charString)
</pre>
<a name="FontCharsWidth"><h4>FontCharsWidth</h4>

<pre>width = NSBSystemLib.FontCharsWidth(charString, optionalLen)</pre>

Return the width of the specified character string. The Missing
Character Symbol is substituted for any character which
does not exist in the current font.
<pre><p><i>Parameters</i>

charString as String
optionalLen as Integer
	0 = use actual string length

<p><i>Returns</i>

width as Integer

<p><i>Example</i>

Dim width as Integer
Dim charString as String
Dim optionalLen as Integer

width = NSL.FontCharsWidth(charString, optionalLen)
</pre>
<a name="FontWidthToOffset"><h4>FontWidthToOffset</h4>

<pre>offset = NSBSystemLib.FontWidthToOffset(charString, optionalLen, width)</pre>

Given a pixel position, return the offset of the character
displayed at that location.  If the pixel position was on the
left side of the character, GlobalStartPos() will return 1,
otherwise, it will return 0.  GlobalWidth() will return the
pixel width of the text up to the returned offset.
<pre><p><i>Parameters</i>

charString as String
optionalLen as Integer
	0 = use actual string length
width as Integer

<p><i>Returns</i>

offset as Integer

<p><i>Example</i>

Dim offset as Integer
Dim charString as String
Dim optionalLen as Integer
Dim width as Integer

offset = NSL.FontWidthToOffset(charString, optionalLen, width)
</pre>
<a name="FontCharsInWidth"><h4>FontCharsInWidth</h4>

<pre>length = NSBSystemLib.FontCharsInWidth(charString, optionalLen, width)</pre>

Find the length in bytes of the characters from a specified
string that fit within a passed width.  GlobalWidth() will
return the actual pixel width of the characters that fit
within the passed width.
<pre><p><i>Parameters</i>

charString as String
optionalLen as Integer
	0 = use actual string length
width as Integer

<p><i>Returns</i>

length as Integer

<p><i>Example</i>

Dim length as Integer
Dim charString as String
Dim optionalLen as Integer
Dim width as Integer

length = NSL.FontCharsInWidth(charString, optionalLen, width)
</pre>
Spaces at the end of a string are ignored and removed.
Characters after a carriage return are ignored, the
string is considered truncated.
<a name="FontWordWrap"><h4>FontWordWrap</h4>

<pre>length = NSBSystemLib.FontWordWrap(charString, width)</pre>

Given a string, determine how many bytes of text can be
displayed within the specified width.
<pre><p><i>Parameters</i>

charString as String
width as Integer
	0 = use actual string length

<p><i>Returns</i>

length as Integer

<p><i>Example</i>

Dim length as Integer
Dim charString as String
Dim width as Integer

length = NSL.FontWordWrap(charString, width)
</pre>
<hr><a name="HotSync Data"><h2>HotSync Data</h2>
The HotSync data functions provide information from the
HotSync application.
<a name="SyncUserName"><h4>SyncUserName</h4>

<pre>userName = NSBSystemLib.SyncUserName()</pre>

Returns the HotSync user name.
<pre>
<p><i>Returns</i>

userName as String

<p><i>Example</i>

Dim userName as String
userName = NSL.SyncUserName()
</pre>
<a name="SuccessfulSync"><h4>SuccessfulSync</h4>

<pre>syncDate = NSBSystemLib.SuccessfulSync()</pre>

Returns the date, in system format, of the last successful
HotSync operation.  System format dates are expressed as
the number of seconds since January 1st, 1904.  Use the
StringDateTime(), StringDate(), or StringTime() functions
to retrieve a string representation of a system format date.
<pre>
<p><i>Returns</i>

syncDate as Integer

<p><i>Example</i>

Dim syncDate as Integer
syncDate = NSL.SuccessfulSync()
</pre>
<a name="LastSync"><h4>LastSync</h4>

<pre>syncDate = NSBSystemLib.LastSync()</pre>

Returns the date, in system format, of the last successful
or unsuccessful HotSync operation.  System format dates are
expressed as the number of seconds since January 1st, 1904.
Use the StringDateTime(), StringDate(), or StringTime()
functions to retrieve a string representation of a system
format date.
<pre>
<p><i>Returns</i>

syncDate as Integer

<p><i>Example</i>

Dim syncDate as Integer
syncDate = NSL.LastSync()
</pre>
<hr><a name="Localization Functions"><h2>Localization Functions</h2>
The localization functions are used to convert date and
number strings from Standard/US format to the user's
preferred format as specified in the system preferences.
For instance, in some European countries, the "thousands"
separator in a number is a "." and the "decimal" separator
is a ",".  Dates are usually preferred in dd/mm/yy format.
These functions look up the user's set preference for these
formats and provide any conversion necessary.
<a name="LocalizeNumber"><h4>LocalizeNumber</h4>

<pre>localNbrStr = NSBSystemLib.LocalizeNumber(stdNbrStr)</pre>

Convert a number string in standard/US format to a
localized format as determined by system preferences.
<pre><p><i>Parameter</i>

stdNbrStr as String

<p><i>Returns</i>

localNbrStr as String

<p><i>Example</i>

Dim localNbrStr as String
Dim stdNbrStr as String

stdNbrStr = "4,123.56"
localNbrStr = NSL.LocalizeNumber(stdNbrStr)
</pre>
<a name="DelocalizeNumber"><h4>DelocalizeNumber</h4>

<pre>stdNbrStr = NSBSystemLib.DelocalizeNumber(localNbrStr)</pre>

Convert a number string in a localized format to a
standard/US format as determined by system preferences.
<pre><p><i>Parameter</i>

localNbrStr as String

<p><i>Returns</i>

stdNbrStr as String

<p><i>Example</i>

Dim stdNbrStr as String
Dim localNbrStr as String

locNbrStr = "4.123,56"
stdNbrStr = NSL.DelocalizeNumber(localNbrStr)
</pre>
<a name="LocalizeDate"><h4>LocalizeDate</h4>

<pre>localDateStr = NSBSystemLib.LocalizeDate(stdDateStr, ToDateFormat, longDateFormat)</pre>

Convert a date string in standard/US format to a localized
date format as determined by system preferences.
<pre><p><i>Parameters</i>

stdDateStr as String
	The date string may also contain the time.  Time values
	will be ignored.
ToDateFormat as Integer
	0 = stdDateStr format is "MM/DD/YY[YY]"
	1 = stdDateStr format is "[YY]YY/MM/DD"
longDateFormat as Integer
	0 = use short date format preference
	1 = user long date format preference

<p><i>Returns</i>

localDateStr as String

<p><i>Example</i>

Dim localDateStr as String
Dim stdDateStr as String
Dim ToDateFormat as Integer
Dim longDateFormat as Integer

stdDateStr = DateMMDDYY(Today())
ToDateFormat = 0
longDateFormat = 0
localDateStr = NSL.LocalizeDate(stdDateStr, ToDateFormat, longDateFormat)
</pre>
<hr><a name="Preference Functions"><h2>Preference Functions</h2>
Preferences are divided into two categories - System
Preferences and Application Preferences.  System Preferences
include such things as auto-off time, date formats, etc.
Application Preferences are used for storing information
about a particular application.  These preferences can be
used to store program state, registration codes, etc.  Using
application preferences can eliminate the need to create a
specific database for this purpose.  Application preferences
are not intended to contain very large amounts of data.
<a name="GetAppPreferences"><h4>GetAppPreferences</h4>

<pre>data = NSBSystemLib.GetAppPreferences(pgmName, prefId, saved)</pre>

Get an application preference string.
<pre><p><i>Parameters</i>

pgmName as String
	Program Name - This is case sensitive
prefId as Integer
	Preference ID
saved as Integer
	0 = preference does not get restored after a hard reset
	1 = preference does get restored after a hard reset

<p><i>Returns</i>

data as String

<p><i>Example</i>

Dim data as String
Dim pgmName as String
Dim prefId as Integer
Dim saved as Integer

pgmName = "SysLibTest"
prefId = 1
saved = 0
data = NSL.GetAppPreferences(pgmName, prefId, saved)
</pre>
Currently preference strings are limited to 250 bytes or
less.
<a name="SetAppPreferences"><h4>SetAppPreferences</h4>

<pre>status = NSBSystemLib.SetAppPreferences(pgmName, prefId, data, saved)</pre>

Set an application preference string.
<pre><p><i>Parameters</i>

pgmName as String
	Program Name - This is case sensitive
prefId as Integer
	Preference ID
data as String
saved as Integer
	0 = preference does not get restored after a hard reset
	1 = preference does get restored after a hard reset

<p><i>Returns</i>

status as Integer
	 0 = Success
	-1 = Invalid program name

<p><i>Example</i>

Dim status as Integer
Dim pgmName as String
Dim prefId as Integer
Dim data as String
Dim saved as Integer

pgmName = "SysLibTest"
prefId = 1
data = "anything I want!"
saved = 0
status = NSL.SetAppPreferences(pgmName, prefId, data, saved)
</pre>
Currently preference strings are limited to 250 bytes or
less.
<a name="GetSysPreference"><h4>GetSysPreference</h4>

<pre>data = NSBSystemLib.GetSysPreference(prefID)</pre>

Get the value of a system preference.
<pre><p><i>Parameter</i>

prefID as Integer
	 From Preferences.h in the PalmOS SDK:
	 0 = prefVersion
	 1 = prefCountry
	 2 = prefDateFormat
	 3 = prefLongDateFormat
	 4 = prefWeekStartDay
	 5 = prefTimeFormat
	 6 = prefNumberFormat
	 7 = prefAutoOffDuration
	         prefAutoOffDurationSecs is now preferred
	         (prefAutoOffDuration is in minutes)
	 8 = prefSysSoundLevelV20
	 9 = prefGameSoundLevelV20
	10 = prefAlarmSoundLevelV20
	11 = prefHidePrivateRecordsV33
	12 = prefDeviceLocked
	13 = prefLocalSyncRequiresPassword
	14 = prefRemoteSyncRequiresPassword
	15 = prefSysBatteryKind
	16 = prefAllowEasterEggs
	17 = prefMinutesWestOfGMT
	         deprecated old unsigned minutes EAST of GMT
	18 = prefDaylightSavings
	         deprecated old daylight saving time rule
	19 = prefRonamaticChar
	20 = prefHard1CharAppCreator
	         App creator for hard key #1
	21 = prefHard2CharAppCreator
	22 = prefHard3CharAppCreator
	23 = prefHard4CharAppCreator
	24 = prefCalcCharAppCreator
	25 = prefHardCradleCharAppCreator
	26 = prefLauncherAppCreator
	27 = prefSysPrefFlags
	28 = prefHardCradle2CharAppCreator
	29 = prefAnimationLevel
	
	Additions for PalmOS 3.0:
	-------------------------
	30 = prefSysSoundVolume
		actual amplitude - error beeps and other
	        non-alarm/game sounds
	31 = prefGameSoundVolume
	32 = prefAlarmSoundVolume
	33 = prefBeamReceive
	         not used - use ExgLibControl with ir(Get/Set)
	         ScanningMode instead
	34 = prefCalibrateDigitizerAtReset
	         True makes the user calibrate at soft reset time
	35 = prefSystemKeyboardID
	         ID of the preferred keyboard resource
	36 = prefDefSerialPlugIn
	         creator ID of the default serial plug-in
	
	Additions for PalmOS 3.1:
	-------------------------
	37 = prefStayOnWhenPluggedIn
	38 = prefStayLitWhenPluggedIn
	
	Additions for PalmOS 3.2:
	-------------------------
	39 = prefAntennaCharAppCreator
	         App creator for antenna key
	
	Additions for PalmOS 3.3:
	-------------------------
	40 = prefMeasurementSystem
	         English, Metric, etc.
	
	Additions for PalmOS 3.5:
	-------------------------
	41 = prefShowPrivateRecords
	         returns privateRecordViewEnum
	42 = prefAutoOffDurationSecs
	
	Additions for PalmOS 4.0:
	-------------------------
	43 = prefTimeZone
	         GMT offset in minutes, + for east of GMT, - for west
	44 = prefDaylightSavingAdjustment
	         current DST adjustment in minutes (typically 0 or 60)
	45 = prefAutoLockType
	          Never, on poweroff, after preset delay or at preset time.
	46 = prefAutoLockTime
	          Auto lock preset time or delay.
	47 = prefAutoLockTimeFlag
	          For Minutes or Hours.
	48 = prefLanguage
	          Language spoken in country selected via
	          Setup app/Formats panel
	49 = prefLocale
	          Locale for country selected via Setup app/Formats panel
	50 = prefTimeZoneCountry
	          Country used to specify time zone.
	51 = prefAttentionFlags
	          User prefs for getting user's attention
	52 = prefDefaultAppCreator
	          Default application launched on reset.

<p><i>Returns</i>

data as Integer

<p><i>Example</i>

Dim data as Integer
Dim prefID as Integer

prefID = 7   'prefAutoOffDuration - in seconds
data = NSL.GetSysPreference(prefID)
</pre>
<a name="SetSysPreference"><h4>SetSysPreference</h4>

<pre>NSBSystemLib.SetSysPreference prefID, data</pre>

Set the value of a system preference.
<pre><p><i>Parameters</i>

prefID as Integer
	See GetSysPreference() for preference ID values

data as Integer

<p><i>Example</i>

Dim prefID as Integer
Dim data as Integer

prefID = 7   'prefAutoOffDuration - in minutes
data = 3     '3 minutes
NSL.SetSysPreference prefID, data
</pre>
<hr><a name="Progress Manager Functions"><h2>Progress Manager Functions</h2>
The Progress Manager functions provide methods for providing
and updating a dialog that is displayed during long operations.
They provide feedback to the user about the progress of the
operation.
<a name="ProgressStartDialog"><h4>ProgressStartDialog</h4>

<pre>NSBSystemLib.ProgressStartDialog title</pre>

Start a Progress Dialog.  The Progress Dialog functions are
used to display a special type of alert that informs the user
of the progress being made during operations that take a long
time.
<pre><p><i>Parameter:</i>

title as String
	must be 20 characters or less.

<p><i>Example</i>

Dim title as String
Dim message as String
Dim stage as Integer
Dim error as Integer
Dim force as Integer
Dim canceled as Integer
Dim strValue as String
Dim resolution as Integer
Dim completeChar as String
Dim incompleteChar as String
Dim percent as Integer
Dim count as Integer

completeChar = "|"
incompleteChar = "."
resolution = 5
count = 100

title = "Progress Test..."
NSL.ProgressStartDialog title
Delay 1
error = 0
stage = 1
Do While stage &lt;= count
    canceled = NSL.ProgressUserCancel()
    If canceled = 1 Then
        Exit Do
    End If
    percent = NSL.ProgressPercent(stage, count)
    strValue = NSL.ProgressPercentString(percent, resolution, _
                                         completeChar, incompleteChar)
    Message = strValue + Chr(10) + Str(percent) _
            + "% complete" + Chr(10) _
            + "stage = " + Str(stage)
    NSL.ProgressUpdateDialog error, message
    stage = stage + 1
    Delay 0.25
Loop

force = 0
Delay 1
NSL.ProgressStopDialog(force)
</pre>
 See also:  ProgressStopDialog(), ProgressUpdateDialog()
<a name="ProgressStopDialog"><h4>ProgressStopDialog</h4>

<pre>NSBSystemLib.ProgressStopDialog force</pre>

Stops a Progress Dialog.  This function must be called to
make the dialog disappear.
<pre><p><i>Parameter:</i>

force as Integer
	0 = do not force an immediate exit of the dialog
	1 = force an immediate exit of the dialog
	    This parameter only has meaning if the dialog is
	    in the process of displaying an error message.  If
	    "force" is set to 0, then the user must press the
	    "OK" button on the dialog before the dialog disappears.

<p><i>Example</i>

See the example provided with ProgressStartDialog()
</pre>
<a name="ProgressUpdateDialog"><h4>ProgressUpdateDialog</h4>

<pre>NSBSystemLib.ProgressUpdateDialog error, message</pre>

Update the message that is displayed in the Progress Dialog.
<pre><p><i>Parameters</i>

error as Integer
	0 = no error
	1 = use error processing
	    if "error" is set to 1, the dialog will display the
	    specified message and only present one button - "OK".

message as String
	Message string to display.  This string must be less than
	128 characters in length.

<p><i>Example</i>

See the example provided with ProgressStartDialog().
</pre>
<a name="ProgressUserCancel"><h4>ProgressUserCancel</h4>

<pre>canceled = NSBSystemLib.ProgressUserCancel()</pre>

Returns 1 if the user pressed the "Cancel" button on the
Progress dialog.  If you have an operation that should not
or can not be canceled, then do not call this function.
The "Cancel" button will still be present, but it will not
do anything.  Currently, with PalmOS, this button can not
be made invisible or grayed out.
<pre>
<p><i>Returns</i>

canceled as Integer

<p><i>Example</i>

See the example provided with ProgressStartDialog().
</pre>
<a name="ProgressPercent"><h4>ProgressPercent</h4>

<pre>percent = NSBSystemLib.ProgressPercent(current, count)</pre>

Calculates a percentage complete number based on the
input values.  This function is not really part of the
Progress Manager API.  It is just provided as a convenient
way to calculate a percentage complete value that can be
included in your Progress Dialog message.
<pre><p><i>Parameters</i>

current as Integer
	Current iteration number of your process loop.
count as Integer
	Number of iterations required to be 100 percent complete.

<p><i>Returns</i>

percent as Integer

<p><i>Example</i>

See the example provided with ProgressStartDialog().
</pre>
<a name="ProgressPercentString"><h4>ProgressPercentString</h4>

<pre>strValue = NSBSystemLib.ProgressPercentString(percent, resolution, completeChar, incompleteChar)</pre>

Constructs a string with characters representing the
percentage complete and incomplete for your process loop.
This function is not really part of the Progress Manager
API.  It is just provided as a convenient way to display
a crude "graphic" representation of your loop's progress.
This string can be included as part of your Progress Dialog
message.
<pre><p><i>Parameters</i>

percent as Integer
	Percent complete - see also ProgressPercent().
resolution as Integer
	The resolution size of the percent string.
	  A resolution of 1 means that there will be 100
	  characters in the percent string.  Every 1% change
	  will be reflected in the percent string.  A
	  resolution of 5 means that there will be 20
	  characters in the percent string.  Every 5% change
	  will be reflected in the percent string.
	  As you can see, the total length of the percent
	  string is calculated as (100 / resolution).  As such,
	  resolution values should be one of the following:
	      1, 2, 4, 5, 10, 20, 25, or 50
completeChar as String
	The character to display for the percent completed.
	    "|" is recommended.
incompleteChar as String
	The character to display for the percent incomplete.
	    "." is recommended.
	  The "completeChar" and "incompleteChar" characters
	  should probably be characters with the exact same
	  pixel width.  Otherwise, the percent string display
	  width will vary as the percentage complete changes.

<p><i>Returns</i>

strValue as String

<p><i>Example</i>

See the example provided with ProgressStartDialog().
</pre>
<hr><a name="String Functions"><h2>String Functions</h2>
The following string functions provide convenient methods
for manipulating strings for use with the other functions
in this library.
<a name="String4ToInt"><h4>String4ToInt</h4>

<pre>intValue = NSBSystemLib.String4ToInt(fourByteString)</pre>

Returns the integer value of a 4 byte string.  This function
is useful for calculating the integer value of Creator IDs,
Application Types, Resource Types, etc.
<pre><p><i>Parameter</i>

fourByteString as String

<p><i>Returns</i>

intValue as Integer

<p><i>Example</i>

Dim intValue as Integer
Dim fourByteString as String

fourByteString = "libr"
intValue = NSL.String4ToInt(fourByteString)
</pre>
See also:  IntToString4()
<a name="IntToString4"><h4>IntToString4</h4>

<pre>fourByteString = NSBSystemLib.IntToString4(intValue)</pre>

Returns a 4 byte string from an integer value.  This function
is useful for retrieving the string value of integer
Creator IDs, Application Types, Resource Types, etc.
<pre><p><i>Parameter</i>

intValue as Integer

<p><i>Returns</i>

fourByteString as String

<p><i>Example</i>

Dim fourByteString as String
Dim intValue as Integer

intValue = 1818845810  '"libr"
fourByteString = NSL.IntToString4(intValue)
</pre>
See also:  String4ToInt()
<a name="DelimitedItem"><h4>DelimitedItem</h4>

<pre>item = NSBSystemLib.DelimitedItem(inputStr, delimiter, nbr)</pre>

Returns a particular substring item from a string that
contains multiple items separated by a particular delimiter.
<pre><p><i>Parameters</i>

inputStr as String
	A string containing delimited items.
delimiter as String
	A string containing the delimiter character or characters.
nbr as Integer
	The item number to return.  Item numbers begin with 1.

<p><i>Returns</i>

item as String
	The delimiter string will be returned if the requested
	item is not present.

<p><i>Example</i>

Dim item as String
Dim inputStr as String
Dim delimiter as String
Dim nbr as Integer

inputStr = "Joe;Mary;Jane"
delimiter = ";"
nbr = 2
'Returns the string "Mary"
item = NSL.DelimitedItem(inputStr, delimiter, nbr)
</pre>
The input string can not be longer than 250 characters.
<a name="FixedWidthString"><h4>FixedWidthString</h4>

<pre>fixedStr = NSBSystemLib.FixedWidthString(origStr, width, options)</pre>

This function returns a fixed width string.  It can be used
to create columns of data that line up nicely in fields,
popups, or list boxes.  A combination of "wide" spaces
(chr(25)) and "normal" spaces (chr(32)) are appended, if
necessary, to pad the string to the desired pixel width.
Strings that can not fit within the specified width are
truncated.
<br><br>
A wide space is 5 pixels wide.  A normal space is 2 pixels
wide.  This function only works with the standard font - font
id 0.
<pre><p><i>Parameters</i>

origStr as String
	Original string.
width as Integer
	Width in pixels.
options as Integer
	0 = left justify string
	1 = right justify string
	2 = left justify string and use ellipsis (...) if truncated
	3 = right justify string and use ellipsis (...) if truncated
	4 = center justify string and use ellipsis (...) if truncated
	5 = center justify string

<p><i>Returns</i>

fixedStr as String
	Fixed width string

<p><i>Example</i>

Dim fixedStr as String
Dim origStr as String
Dim width as Integer
Dim options as Integer

origStr = "This is a test"
width = 80
options = 0
fixedStr = NSL.FixedWidthString(origStr, width, options)
</pre>
Use the NormalSpacedString() function to translate a
fixed width string back to a string containing only
normal spaces.
<a name="NormalSpacedString"><h4>NormalSpacedString</h4>

<pre>normalStr = NSBSystemLib.NormalSpacedString(origStr)</pre>

Translates a fixed width string to a string containing
only normal spaces.  This function replaces all "wide" spaces
(chr(25)) with "normal" spaces (chr(32)).
<pre><p><i>Parameter</i>

origStr as String

<p><i>Returns</i>

normalStr as String

<p><i>Example</i>

Dim normalStr as String
Dim origStr as String

normalStr = NSL.NormalSpacedString(origStr)
</pre>
See also:  FixedWidthString()
<hr><a name="System Time Functions"><h2>System Time Functions</h2>
The PalmOS system time format is an integer that contains
the number of seconds since January 1st, 1904.  Most of the
PalmOS API functions that have date and time parameters use
this format.  The system time functions provide methods for
creating and interpretting system time format values.
<a name="SelectOneTime"><h4>SelectOneTime</h4>

<pre>newTimeSelected = NSBSystemLib.SelectOneTime(defHour, defMinute, title)</pre>

Calls the SelectOneTime() PalmOS function to display a dialog
that allows a user to select 1 time value.  This function
returns 1 if a newTime was selected, otherwise it returns 0.
use the GlobalHour() and GlobalMinute() functions to retrieve
selected time values.
<pre><p><i>Parameters</i>

defHour as Integer
	Default hour for selection
defMinute as Integer
	Default minute for selection
title as String

<p><i>Returns</i>

newTimeSelected as Integer

<p><i>Example</i>

Dim newTimeSelected as Integer
Dim defHour as Integer
Dim defMinute as Integer
Dim title as String

defHour = 10
defMinute = 30
title = "Some Title"
newTimeSelected = NSL.SelectOneTime(defHour, defMinute, title)
If newTimeSelected = 1 Then
    defHour = NSL.GlobalHour()
    defMinute = NSL.GlobalMinute()
End If
</pre>
<a name="IncrementSystemTime"><h4>IncrementSystemTime</h4>

<pre>newSysTime = NSBSystemLib.IncrementSystemTime(oldSysTime, hours, minutes, seconds)</pre>

Returns a system time value that is incremented by the
specified number of hours, minutes, and seconds.  A system
time value is an integer that is expressed as the number of
seconds since January 1st, 1904.
<pre><p><i>Parameters</i>

oldSysTime as Integer
	0 = use current system time.
hours as Integer
minutes as Integer
seconds as Integer

<p><i>Returns</i>

newSysTime as Integer

<p><i>Example</i>

Dim newSysTime as Integer
Dim oldSysTime as Integer
Dim hours as Integer
Dim minutes as Integer
Dim seconds as Integer

oldSysTime = 0
hours = 0
minutes = 30
seconds = 0
'Add 30 minutes
newSysTime = NSL.IncrementSystemTime(oldSysTime, hours, minutes, seconds)
</pre>
<a name="SystemTime"><h4>SystemTime</h4>

<pre>sysTime = NSBSystemLib.SystemTime(strDate, strTime, seconds, ToDateFormat)</pre>

Returns a "System Time" value.  This value is expressed as
the number of seconds since January 1st, 1904.  The time to
return is supplied as strings in the strDate and strTime
parameters.  The strDate parameter may contain only a date
value or both a date and a time value.  If the strTime
parameter is blank (""), the time, if specified, in the
strDate parameter will be used.  If both the strDate and the
strTime parameters are blank, the current system time will
be used. The additional seconds parameter is used to provide
an easy way to increment or decrement the returned system time.
For example:
    systemTime = NSL.SystemTime("", "", 5, 0)
returns the current time plus 5 seconds.
<pre><p><i>Parameters</i>

strDate as String
	See the ToDateFormat parameter for date string formats.
strTime as String
	The time string is specified as: "HH[:MM[:SS]][AM|PM|am|pm]"
	(actually, if the character 'P' or 'p' is present, the time
	 will be interpreted as AM/PM format and the hour will be
	 appropriately adjusted).
seconds as Integer
	Increment (or decrement, if negative) the returned systemTime
	by the specified number of seconds.
ToDateFormat as Integer
	0 = strDate string is in MM/DD/YYYY or MM/DD/YY format.
	1 = strDate string is in YYYY/MM/DD or YY/MM/DD format.

<p><i>Returns</i>

sysTime as Integer
	Integer time as expressed as the number of seconds since
	January 1st, 1904.

<p><i>Example</i>

Dim sysTime as Integer
Dim strDate as String
Dim strTime as String
Dim seconds as Integer
Dim ToDateFormat as Integer

strDate = ""
strTime = ""
Seconds = 5
ToDateFormat = 0
sysTime = NSL.SystemTime(strDate, strTime, seconds, ToDateFormat)
</pre>
See also:  StringDateTime(), StringDate(), and StringTime()
<a name="StringDateTime"><h4>StringDateTime</h4>

<pre>strDateTime = NSBSystemLib.StringDateTime(sysTime, ToDateFormat, ToTimeFormat, AMPMFormat)</pre>

Returns a string representation of the supplied "System Time"
value.  The sysTime value is an integer value expressed
as the number of seconds since January 1st, 1904.  The
returned value is a string containing both the date and time.
If the sysTime parameter is specified as 0, the current system
date and time will be returned.
<pre><p><i>Parameters</i>

sysTime as Integer
	Integer time as expressed as the number of seconds since
	January 1st, 1904.
ToDateFormat as Integer
	0 = the date string will be in MM/DD/YY format.
	1 = the date string will be in YYYY/MM/DD format.
	2 = the date string will be in MM/DD/YYYY format.
	3 = the date string will be in YY/MM/DD format.
ToTimeFormat as Integer
	0 = the time string will be in HH:MM format.
	1 = the time string will be in HH:MM:SS format.
AMPMFormat as Integer
	0 = no AM/PM indicators will be added.
	1 = " AM" or " PM" indicator will be added and the hour will
	    will be adjusted appropriately.

<p><i>Returns</i>

strDateTime as String

<p><i>Example</i>

Dim strDateTime as String
Dim sysTime as Integer
Dim ToDateFormat as Integer
Dim ToTimeFormat as Integer
Dim AMPMFormat as Integer

sysTime = SystemTime("", "", 0, 0)
strDateTime = NSL.StringDateTime(sysTime, ToDateFormat, ToTimeFormat, AMPMFormat)
</pre>
See also:  SystemTime(), StringDate(), and StringTime()
<a name="StringDate"><h4>StringDate</h4>

<pre>strDate = NSBSystemLib.StringDate(sysTime, ToDateFormat)</pre>

Returns a string representation of the supplied "System Time"
value.  The sysTime value is an integer value expressed
as the number of seconds since January 1st, 1904.  The
returned value is a string containing only the date.
If the sysTime parameter is specified as 0, the current system
date will be returned.
<pre><p><i>Parameters</i>

sysTime as Integer
	Integer time as expressed as the number of seconds since
	January 1st, 1904.
ToDateFormat as Integer
	0 = the date string will be in MM/DD/YY format.
	1 = the date string will be in YYYY/MM/DD format.
	2 = the date string will be in MM/DD/YYYY format.
	3 = the date string will be in YY/MM/DD format.

<p><i>Returns</i>

strDate as String

<p><i>Example</i>

Dim strDate as String
Dim sysTime as Integer
Dim ToDateFormat as Integer

sysTime = SystemTime("", "", 0, 0)
strDate = NSL.StringDate(sysTime, ToDateFormat)
</pre>
See also:  SystemTime(), StringDateTime(), and StringTime()
<a name="StringTime"><h4>StringTime</h4>

<pre>strTime = NSBSystemLib.StringTime(sysTime, ToTimeFormat, AMPMFormat)</pre>

Returns a string representation of the supplied "System Time"
value.  The sysTime value is an integer value expressed
as the number of seconds since January 1st, 1904.  The
returned value is a string containing only the time.
If the sysTime parameter is specified as 0, the current system
time will be returned.
<pre><p><i>Parameters</i>

sysTime as Integer
	Integer time as expressed as the number of seconds since
	January 1st, 1904.
ToTimeFormat as Integer
	0 = the time string will be in HH:MM format.
	1 = the time string will be in HH:MM:SS format.
AMPMFormat as Integer
	0 = no AM/PM indicators will be added.
	1 = " AM" or " PM" indicator will be added and the hour will
	    will be adjusted appropriately.

<p><i>Returns</i>

strTime as String

<p><i>Example</i>

Dim strTime as String
Dim sysTime as Integer
Dim ToTimeFormat as Integer
Dim AMPMFormat as Integer

sysTime = SystemTime("", "", 0, 0)
strTime = NSL.StringTime(sysTime, ToTimeFormat, AMPMFormat)
</pre>
See also:  SystemTime(), StringDateTime(), and StringDate()
<hr><a name="Version 1.4 Changes and Additions"><h2>Version 1.4 Changes and Additions</h2>
Version 1.4 contains additional options for the FixedWidthString,
StringDateTime, and StringDate functions.
<br><br>
The "rightJustify" parameter of the FixedWidthString function
has been changed to "options".  This parameter still controls
justification but it is also now used to control whether an ellipsis
("...") is appended to a string that had to be truncated.
<br><br>
The StringDateTime and StringDate functions now have 2 new
option values for the "ToDateFormat" parameter.  These options
provide more flexibility in how the year is formatted.
<br><br>
The following functions are new in this version of the
NSBSystemLib shared library.  It would be wise to check
the NSBSystemLib version number to ensure that it is version
1.4 or greater before using any of these new functions.
<a name="PostEvent"><h4>PostEvent</h4>

<pre>NSBSystemLib.PostEvent eventNbr</pre>

Posts an event to the event queue by calling EvtAddEventToQueue.
The event number should be a custom event in the range of
24576 to 32767.
<pre><p><i>Parameter:</i>

eventNbr as Integer

<p><i>Example</i>

Dim eventNbr as Integer
eventNbr = 30000
NSL.PostEvent eventNbr
</pre>
<a name="FormGetFocus"><h4>FormGetFocus</h4>

<pre>objID = NSBSystemLib.FormGetFocus()</pre>

Returns the object ID of the object that currently has focus.
<pre>
<p><i>Returns</i>

objID as Integer
	-1 if no object has focus.

<p><i>Example</i>

Dim objID as Integer
objID = NSL.FormGetFocus()
</pre>
<a name="FieldGetTextLength"><h4>FieldGetTextLength</h4>

<pre>txtLen = NSBSystemLib.FieldGetTextLength(objID)</pre>

Returns the length of a field's text.
<pre><p><i>Parameter</i>

objID as Integer
	0 = use field that currently has focus
	    objID may be either an Object ID or an Object Index.
	    If the value of objID is between 1 and the number of
	    objects on the form, objID is assumed to be an Object
	    Index, otherwise, it is assumed to be an Object ID.

<p><i>Returns</i>

txtLen as Integer

<p><i>Example</i>

Dim txtLen as Integer
Dim objID as Integer

objID = 1008
txtLen = NSL.FieldGetTextLength(objID)
</pre>
<a name="RandomNumber"><h4>RandomNumber</h4>

<pre>nbr = NSBSystemLib.RandomNumber(seed, minNbr, maxNbr)</pre>

Returns a random integer number in the range from min to max.
<pre><p><i>Parameters</i>

seed as Integer
	New seed value, use 0 to use the existing seed.
minNbr as Integer
	Min must be &gt;= 0 and less than Max
maxNbr as Integer
	Max must be &lt;= 32767 and greater than Min

<p><i>Returns</i>

nbr as Integer

<p><i>Example</i>

Dim nbr as Integer
Dim seed as Integer
Dim minNbr as Integer
Dim maxNbr as Integer

minNbr = 1
maxNBR = 10
nbr = NSL.RandomNumber(seed, minNbr, maxNbr)
</pre>
<a name="ResetAutoOffTimer"><h4>ResetAutoOffTimer</h4>

<pre>NSBSystemLib.ResetAutoOffTimer()</pre>

Reset the AutoOffTimer.  This function is typically called in a
loop to keep the auto off timer from turning off the device
during long running operations.
<pre>
<p><i>Example</i>

NSL.ResetAutoOffTimer()
</pre>
<a name="SetAutoOffTime"><h4>SetAutoOffTime</h4>

<pre>oldSeconds = NSBSystemLib.SetAutoOffTime(newSeconds)</pre>

Set the auto off time in seconds.  This function returns the
previous setting so that it can be restored when the program
or function ends.
<pre><p><i>Parameter</i>

newSeconds as Integer

<p><i>Returns</i>

oldSeconds as Integer

<p><i>Example</i>

Dim oldSeconds as Integer
Dim newSeconds as Integer

newSeconds = 600  '10 minutes
oldSeconds = NSL.SetAutoOffTime(newSeconds)
</pre>
<a name="ProgramVersionString"><h4>ProgramVersionString</h4>

<pre>verStr = NSBSystemLib.ProgramVersionString(cardNbr, pgmName)</pre>

Returns a program's version string by reading it's first 'tver'
resource.  If this resource is not available, the database version
number is returned.
<pre><p><i>Parameters</i>

cardNbr as Integer
pgmName as String

<p><i>Returns</i>

verStr as String

<p><i>Example</i>

Dim verStr as String
Dim cardNbr as Integer
Dim pgmName as String

cardNbr = 0
pgmName = "NSBSystemLib"
verStr = NSL.ProgramVersionString(cardNbr, pgmName)
</pre>
<a name="DynamicHeapSize"><h4>DynamicHeapSize</h4>

<pre>heapSize = NSBSystemLib.DynamicHeapSize()</pre>

Returns the size of the Dynamic Heap.
<pre>
<p><i>Returns</i>

heapSize as Integer

<p><i>Example</i>

Dim heapSize as Integer
heapSize = NSL.DynamicHeapSize()
</pre>
<a name="DynamicHeapFree"><h4>DynamicHeapFree</h4>

<pre>freeSize = NSBSystemLib.DynamicHeapFree()</pre>

Returns the number of free bytes in the Dynamic Heap.
<pre>
<p><i>Returns</i>

freeSize as Integer

<p><i>Example</i>

Dim freeSize as Integer
freeSize = NSL.DynamicHeapFree()
</pre>
<a name="DynamicHeapMaxChunk"><h4>DynamicHeapMaxChunk</h4>

<pre>maxChunkSize = NSBSystemLib.DynamicHeapMaxChunk()</pre>

Returns the size of the largest chunk in the Dynamic Heap.
<pre>
<p><i>Returns</i>

maxChunkSize as Integer

<p><i>Example</i>

Dim maxChunkSize as Integer
maxChunkSize = NSL.DynamicHeapMaxChunk()
</pre>
<a name="SortInit"><h4>SortInit</h4>

<pre>error = NSBSystemLib.SortInit(maxItems, itemType)</pre>

Initializes a sort array to be used with the SortQSort and
SortInsertionSort functions.  The maxItems parameter specifies
the maximum number of items to be sorted/added to the sort array.
This number does not have to be exact, but it must be equal to or
greater than the number of items actually added.  To free the
memory used by a sort array, specify maxItems as 0.  The previous
sort array is automatically freed when the library is closed at
program termination or when a new sort array is initialized.
<br><br>
When maxItems is &gt; 0, the itemType parameter specifies the type
of data that will be sorted.  The itemType parameter is not case
sensitive and must be one of the following strings:  "string",
"integer", or "double".  After the sort array is initialized,
only data of the itemType specified may be added to or retrieved
from the sort array.
<pre><p><i>Parameters</i>

maxItems as Integer
	The maximum number of data items to be added to the sort array.
itemType as String
	The data type to be sorted.
	   Valid values are:  "string", "integer", or "double"

<p><i>Returns</i>

error as Integer
	 0 = no error
	-1 = insufficient dynamic memory
	-2 = invalid itemType parameter

<p><i>Example</i>

See either the SortQSort() or SortInsertionSort() functions.
</pre>
<a name="SortAddString"><h4>SortAddString</h4>

<pre>error = NSBSystemLib.SortAddString(strItem)</pre>

Add a string data item to the sort array.
<pre><p><i>Parameter</i>

strItem as String
	String data to add.

<p><i>Returns</i>

error as Integer
	 0 = no error
	-1 = insufficient dynamic memory
	-2 = sort array has not been initialized
	-3 = sort array was not initialized for string data
	-4 = exceeded the initialized number of items for
	     the sort array

<p><i>Example</i>

See either the SortQSort() or SortInsertionSort() functions.
</pre>
<a name="SortAddInteger"><h4>SortAddInteger</h4>

<pre>error = NSBSystemLib.SortAddInteger(intItem)</pre>

Add an integer data item to the sort array.
<pre><p><i>Parameter</i>

intItem as Integer
	String data to add.

<p><i>Returns</i>

error as Integer
	 0 = no error
	-1 = insufficient dynamic memory
	-2 = sort array has not been initialized
	-3 = sort array was not initialized for integer data
	-4 = exceeded the initialized number of items for
	     the sort array

<p><i>Example</i>

See either the SortQSort() or SortInsertionSort() functions.
</pre>
<a name="SortAddDouble"><h4>SortAddDouble</h4>

<pre>error = NSBSystemLib.SortAddDouble(dblItem)</pre>

Add a double data item to the sort array.
<pre><p><i>Parameter</i>

dblItem as Double
	String data to add.

<p><i>Returns</i>

error as Integer
	 0 = no error
	-1 = insufficient dynamic memory
	-2 = sort array has not been initialized
	-3 = sort array was not initialized for double data
	-4 = exceeded the initialized number of items for
	     the sort array

<p><i>Example</i>

See either the SortQSort() or SortInsertionSort() functions.
</pre>
<a name="SortGetString"><h4>SortGetString</h4>

<pre>strItem = NSBSystemLib.SortGetString(index)</pre>

Retrieve a string data item from the sort array.
<pre><p><i>Parameter</i>

index as Integer
	The index or subscript of a data item in the sort array.

<p><i>Returns</i>

strItem as String

<p><i>Example</i>

See either the SortQSort() or SortInsertionSort() functions.
</pre>
<a name="SortGetInteger"><h4>SortGetInteger</h4>

<pre>intItem = NSBSystemLib.SortGetInteger(index)</pre>

Retrieve an integer data item from the sort array.
<pre><p><i>Parameter</i>

index as Integer
	The index or subscript of a data item in the sort array.

<p><i>Returns</i>

intItem as Integer

<p><i>Example</i>

See either the SortQSort() or SortInsertionSort() functions.
</pre>
<a name="SortGetDouble"><h4>SortGetDouble</h4>

<pre>dblItem = NSBSystemLib.SortGetDouble(index)</pre>

Retrieve a double data item from the sort array.
<pre><p><i>Parameter</i>

index as Integer
	The index or subscript of a data item in the sort array.

<p><i>Returns</i>

dblItem as Double

<p><i>Example</i>

See either the SortQSort() or SortInsertionSort() functions.
</pre>
<a name="SortQSort"><h4>SortQSort</h4>

<pre>numItems = NSBSystemLib.SortQSort(reverseSort, caselessSort)</pre>

Performs a "quick sort" of the items in the sort array that was
initialized with SortInit() and populated with either SortAddString(),
SortAddInteger(), or SortAddDouble().  This function calls the
SysQSort PalmOS API function.  The SortInsertionSort function
can also be used.  Here is how the PalmOS SDK documentation
describes the SysQSort API function:
<br><br>
Equal records can be in any position relative to each other
because a quick sort tends to scramble the ordering of
records. As a result, calling SysQSort multiple times can
result in a different order if the records are not
completely unique. If you don't want this behavior, use the
insertion sort instead (see SysInsertionSort).
<br><br>
To pick the pivot point, the quick sort algorithm picks the
middle of three records picked from around the middle of
all records. That way, the algorithm can take advantage of
partially sorted data.
<br><br>
These optimizations are built in:
<br><br>
The routine contains its own stack to limit uncontrolled
recursion. When the stack is full, an insertion sort is
used because it doesn't require more stack space.
<br><br>
An insertion sort is also used when the number of records
is low. This avoids the overhead of a quick sort which is
noticeable for small numbers of records.
<br><br>
If the records seem mostly sorted, an insertion sort is
performed to move only those few records that need to be
moved.
<pre><p><i>Parameters</i>

reverseSort as Integer
	0 = list is sorted from lowest to highest values
	1 = list is sorted from highest to lowest values
caselessSort as Integer
	0 = sort is case sensitive
	1 = sort is not case sensitive

<p><i>Returns</i>

numItems as Integer
	the number of items sorted
	  Use the appropriate function (SortGetString(),
	  SortGetInteger(), or SortGetDouble()) to return the
	  items from the sort array.

<p><i>Example</i>

Dim error as Integer
Dim maxItems as Integer
Dim itemType as String
Dim numItems as Integer
Dim reverseSort as Integer
Dim caselessSort as Integer
Dim i as Integer
Dim tmpStr as String

maxItems = 100
itemType = "string"
error = NSL.SortInit(maxItems, itemType)
If error &lt;&gt; 0 Then
    MsgBox "SortInit error = " + Str(error)
    Exit Sub
End If

For i = 1 to someNumber
    error = NSL.SortAddString(someStringArray(i))
    If error &lt;&gt; 0 Then
        MsgBox "SortAddString error = " + Str(error)
        Exit Sub
    End If
Next

reverseSort = 0     'Sort from lowest to highest
caselessSort = 1    'Case insensitive sort
numItems = NSL.SortQSort(reverseSort, caselessSort)

For i = 1 to numItems
   tmpStr = NSL.SortGetString(i)
   someStringArray(i) = tmpStr
Next
</pre>
<a name="SortInsertionSort"><h4>SortInsertionSort</h4>

<pre>numItems = NSBSystemLib.SortInsertionSort(reverseSort, caselessSort)</pre>

Performs an "insertion sort" of the items in the sort array that was
initialized with SortInit() and populated with either SortAddString(),
SortAddInteger(), or SortAddDouble().  This function calls the
SysInsertionSort PalmOS API function.  The SortQSort function
can also be used.  Here is how the PalmOS SDK documentation
describes the SysInsertionSort API function:
<br><br>
Only elements which are out of order move. Moved elements
are moved to the end of the range of equal elements. If a
large amount of elements are being sorted, try to use the
quick sort (see SysQSort).
<br><br>
This is the insertion sort algorithm: Starting with the second
element, each element is compared to the preceding element. Each
element not greater than the last is inserted into sorted position
within those already sorted. A binary search for the insertion
point is performed. A moved element is inserted after any other
equal elements.
<pre><p><i>Parameters</i>

reverseSort as Integer
	0 = list is sorted from lowest to highest values
	1 = list is sorted from highest to lowest values
caselessSort as Integer
	0 = sort is case sensitive
	1 = sort is not case sensitive

<p><i>Returns</i>

numItems as Integer
	the number of items sorted
	  Use the appropriate function (SortGetString(),
	  SortGetInteger(), or SortGetDouble()) to return the
	  items from the sort array.

<p><i>Example</i>

Dim error as Integer
Dim maxItems as Integer
Dim itemType as String
Dim numItems as Integer
Dim reverseSort as Integer
Dim caselessSort as Integer
Dim i as Integer
Dim tmpStr as String

maxItems = 100
itemType = "string"
error = NSL.SortInit(maxItems, itemType)
If error &lt;&gt; 0 Then
    MsgBox "SortInit error = " + Str(error)
    Exit Sub
End If

For i = 1 to someNumber
    error = NSL.SortAddString(someStringArray(i))
    If error &lt;&gt; 0 Then
        MsgBox "SortAddString error = " + Str(error)
        Exit Sub
    End If
Next

reverseSort = 0     'Sort from lowest to highest
caselessSort = 1    'Case insensitive sort
numItems = NSL.SortInsertionSort(reverseSort, caselessSort)

For i = 1 to numItems
   tmpStr = NSL.SortGetString(i)
   someStringArray(i) = tmpStr
Next
</pre>
<a name="ListQSort"><h4>ListQSort</h4>

<pre>numItems = NSBSystemLib.ListQSort(objID, reverseSort, caselessSort)</pre>

Performs a "quick sort" of the items in an existing List
object.  This routine uses the SysQSort PalmOS API function.
The ListInsertionSort function can also be used.  To compare
the differences between the quick sort and insertion sort
algorythms, please review the descriptions of the SortQSort
and SortInsertionSort functions in this library.
<pre><p><i>Parameters</i>

objID as Integer
	objectID of the list object
	  Use 0 to specify the object that currently has focus.
reverseSort as Integer
	0 = list is sorted from lowest to highest values
	1 = list is sorted from highest to lowest values
caselessSort as Integer
	0 = sort is case sensitive
	1 = sort is not case sensitive

<p><i>Returns</i>

numItems as Integer
	the number of items sorted

<p><i>Example</i>

Dim numItems as Integer
Dim objID as Integer
Dim reverseSort as Integer
Dim caselessSort as Integer

objID = 1008
reverseSort = 0
caselessSort = 0
numItems = NSL.ListQSort(objID, reverseSort, caselessSort)
</pre>
<a name="ListInsertionSort"><h4>ListInsertionSort</h4>

<pre>numItems = NSBSystemLib.ListInsertionSort(objID, reverseSort, caselessSort)</pre>

Performs an "insertion sort" of the items in an existing List
object.  This routine uses the SysInsertionSort PalmOS API function.
The ListQSort function can also be used.  To compare
the differences between the quick sort and insertion sort
algorythms, please review the descriptions of the SortQSort
and SortInsertionSort functions in this library.
<pre><p><i>Parameters</i>

objID as Integer
	objectID of the list object
	  Use 0 to specify the object that currently has focus.
reverseSort as Integer
	0 = list is sorted from lowest to highest values
	1 = list is sorted from highest to lowest values
caselessSort as Integer
	0 = sort is case sensitive
	1 = sort is not case sensitive

<p><i>Returns</i>

numItems as Integer
	the number of items sorted

<p><i>Example</i>

Dim numItems as Integer
Dim objID as Integer
Dim reverseSort as Integer
Dim caselessSort as Integer

objID = 1008
reverseSort = 0
caselessSort = 0
numItems = NSL.ListInsertionSort(objID, reverseSort, caselessSort)
</pre>
<hr><a name="Version 2.0 Changes and Additions"><h2>Version 2.0 Changes and Additions</h2>
Version 2.0 contains additional options for the FixedWidthString,
StringDateTime, and StringDate functions.
<br><br>
The "rightJustify" parameter of the FixedWidthString function
has been changed to "options".  This parameter still controls
justification but it is also now used to control whether an ellipsis
("...") is appended to a string that had to be truncated.
<br><br>
The following functions are new in this version of the
NSBSystemLib shared library.  It would be wise to check
the NSBSystemLib version number to ensure that it is version
2.0 or greater before using any of these new functions.
<a name="FormGetAllObjectTypes"><h4>FormGetAllObjectTypes</h4>

<pre>type = NSBSystemLib.FormGetAllObjectTypes(objID)</pre>

Retrieves the object type of the specified object.
<pre><p><i>Parameter</i>

objID as Integer
	0 = use object that currently has focus
	    objID may be either an Object ID or an Object Index.
	    If the value of objID is between 1 and the number of
	    objects on the form, objID is assumed to be an Object
	    Index, otherwise, it is assumed to be an Object ID.

<p><i>Returns</i>

type as Integer
	-1 if the object is invalid or no object has focus
	 0 = frmFieldObj
	 2 = frmListObj
	 3 = frmTableObj
	 4 = frmBitmapObj
	 5 = frmLineObj
	 6 = frmFrameObj
	 7 = frmRectangleObj
	 8 = frmLabelObj
	 9 = frmTitleObj
	10 = frmPopupObj
	11 = frmGraffitiStateObj
	12 = frmGadgetObj
	13 = frmScrollbarObj
	100 = buttonCtl
	101 = pushButtonCtl
	102 = checkboxCtl
	103 = popupTriggerCtl
	104 = selectorTriggerCtl
	105 = repeatingButtonCtl
	106 = sliderCtl
	107 = feedbackSliderCtl

<p><i>Example</i>

Dim type as Integer
Dim objID as Integer
objID = 1008
type = NSL.FormGetAllObjectTypes(objID)
</pre>
This function differs from FormGetObjectType() in that it interprets
the individual Control object types rather than just retuning a type
of frmControlObj (value 1).
<a name="FieldClearAll"><h4>FieldClearAll</h4>

<pre>NSBSystemLib.FieldClearAll()</pre>

Clears/erases the text from all the fields on a form.
<pre>
<p><i>Example</i>

NSL.FieldClearAll()
</pre>
<a name="ObjectWithPoint"><h4>ObjectWithPoint</h4>

<pre>obj = NSBSystemLib.ObjectWithPoint(x, y, returnType, searchOption)</pre>

Returns the first object that has the x and y coordinates within
it's bounds.
<pre><p><i>Parameters</i>

x as Integer
	x coordinate
y as Integer
	y coordinate
returnType as Integer
	0 = return the object's ID
	1 = return the object's index
	    This index is in the range of 1 to number of objects
	    on the form. It is the PalmOS index incremented by 1
	    so that it can be used with other functions in this
	    library.  If you use this value with a Systrap, you
	    must subtract 1 from the index.
	2 = return the object's pointer (use variant as the return type)
searchOption as Integer
	0 = search for objects that are usable, visible, and enabled/editable
	1 = search for objects that are usable and visible
	2 = search for all objects

<p><i>Returns</i>

obj as Integer
	object as either an object ID, index, or pointer
	-1 or NULL (0 if returning a pointer) when no object was found

<p><i>Example</i>

Dim obj as Integer
Dim x as Integer
Dim y as Integer
Dim returnType as Integer
Dim searchOption as Integer

obj = NSL.ObjectWithPoint(x, y, returnType, searchOption)
</pre>
<a name="ANDInt"><h4>ANDInt</h4>

<pre>result = NSBSystemLib.ANDInt(int1, int2)</pre>

Returns a bitwise AND of the int1 and int2 parameters.
<pre><p><i>Parameters</i>

int1 as Integer
int2 as Integer

<p><i>Returns</i>

result as Integer

<p><i>Example</i>

Dim result as Integer
Dim int1 as Integer
Dim int2 as Integer

result = NSL.ANDInt(int1, int2)
</pre>
<a name="ORInt"><h4>ORInt</h4>

<pre>result = NSBSystemLib.ORInt(int1, int2)</pre>

Returns a bitwise OR of the int1 and int2 parameters.
<pre><p><i>Parameters</i>

int1 as Integer
int2 as Integer

<p><i>Returns</i>

result as Integer

<p><i>Example</i>

Dim result as Integer
Dim int1 as Integer
Dim int2 as Integer

result = NSL.ORInt(int1, int2)
</pre>
<a name="XORInt"><h4>XORInt</h4>

<pre>result = NSBSystemLib.XORInt(int1, int2)</pre>

Returns a bitwise XOR of the int1 and int2 parameters.
<pre><p><i>Parameters</i>

int1 as Integer
int2 as Integer

<p><i>Returns</i>

result as Integer

<p><i>Example</i>

Dim result as Integer
Dim int1 as Integer
Dim int2 as Integer

result = NSL.XORInt(int1, int2)
</pre>
<a name="OnesComplement"><h4>OnesComplement</h4>

<pre>result = NSBSystemLib.OnesComplement(intValue)</pre>

Returns the "one's complement" of the intValue parameter.
This essentially turns all 1 bits to 0 and all 0 bits to 1.
<pre><p><i>Parameter</i>

intValue as Integer

<p><i>Returns</i>

result as Integer

<p><i>Example</i>

Dim result as Integer
Dim intValue as Integer

result = NSL.OnesComplement(intValue)
</pre>
<a name="BitValue"><h4>BitValue</h4>

<pre>result = NSBSystemLib.BitValue(intValue, bitNumber)</pre>

Returns 1 if the specified bit number is 1, otherwise it
returns 0.
<pre><p><i>Parameters</i>

intValue as Integer
bitNumber as Integer
	Bits are numbered from right to left from 0 to 31.

<p><i>Returns</i>

result as Integer

<p><i>Example</i>

Dim result as Integer
Dim intValue as Integer
Dim bitNumber as Integer

result = NSL.BitValue(intValue, bitNumber)
</pre>
<a name="BitsValue"><h4>BitsValue</h4>

<pre>result = NSBSystemLib.BitsValue(intValue, startBit, endBit)</pre>

Returns the integer value of the specified bits.  The bits
retrieved include the starting and ending bit numbers.
Therefore, BitsValue(intValue, 5, 7) returns the
value of bits 5, 6, and 7.
<pre><p><i>Parameters</i>

intValue as Integer
startBit as Integer
	Bits are numbered from right to left from 0 to 31.
endBit as Integer
	Bits are numbered from right to left from 0 to 31.

<p><i>Returns</i>

result as Integer

<p><i>Example</i>

Dim result as Integer
Dim intValue as Integer
Dim startBit as Integer
Dim endBit as Integer

result = NSL.BitsValue(intValue, startBit, endBit)
</pre>
<a name="SetBitValue"><h4>SetBitValue</h4>

<pre>result = NSBSystemLib.SetBitValue(intValue, bitNumber, bitValue)</pre>

Sets the bit specified by bitNumber to the specified
bit value.
<pre><p><i>Parameters</i>

intValue as Integer
bitNumber as Integer
	Bits are numbered from right to left from 0 to 31.
bitValue as Integer

<p><i>Returns</i>

result as Integer

<p><i>Example</i>

Dim result as Integer
Dim intValue as Integer
Dim bitNumber as Integer
Dim bitValue as Integer

result = NSL.SetBitValue(intValue, bitNumber, bitValue)
</pre>
<a name="SetBitsValue"><h4>SetBitsValue</h4>

<pre>result = NSBSystemLib.SetBitsValue(intValue, bitsValue, startBit, endBit)</pre>

Sets the specified bits to the integer value
specified by bitValue.  The bits set include the starting and ending
bits.  Therefore, SetBitsValue(intValue, 3, 5, 7) sets the value of
bits 5, 6, and 7.
<pre><p><i>Parameters</i>

intValue as Integer
bitsValue as Integer
	Bits are numbered from right to left from 0 to 31.
startBit as Integer
	Bits are numbered from right to left from 0 to 31.
endBit as Integer

<p><i>Returns</i>

result as Integer

<p><i>Example</i>

Dim result as Integer
Dim intValue as Integer
Dim bitsValue as Integer
Dim startBit as Integer
Dim endBit as Integer

result = NSL.SetBitsValue(intValue, bitsValue, startBit, endBit)
</pre>
<a name="IntToHex"><h4>IntToHex</h4>

<pre>hexValue = NSBSystemLib.IntToHex(intValue, trimLeading)</pre>

Convert the specified integer value to a hexadecimal string.
<pre><p><i>Parameters</i>

intValue as Integer
trimLeading as Integer
	0 = do not trim leading zeros from result string
	1 = trim leading zeros from result string.

<p><i>Returns</i>

hexValue as String

<p><i>Example</i>

Dim hexValue as String
Dim intValue as Integer
Dim trimLeading as Integer

hexValue = NSL.IntToHex(intValue, trimLeading)
</pre>
<a name="HexToInt"><h4>HexToInt</h4>

<pre>intValue = NSBSystemLib.HexToInt(hexValue)</pre>

Convert the specified hexadecimal string to an integer value.
<pre><p><i>Parameter</i>

hexValue as String

<p><i>Returns</i>

intValue as Integer

<p><i>Example</i>

Dim intValue as Integer
Dim hexValue as String

intValue = NSL.HexToInt(hexValue)
</pre>
<a name="IntToBin"><h4>IntToBin</h4>

<pre>binValue = NSBSystemLib.IntToBin(intValue, trimLeading)</pre>

Convert the specified integer value to a binary string.
<pre><p><i>Parameters</i>

intValue as Integer
trimLeading as Integer
	0 = do not trim leading zeros from result string
	1 = trim leading zeros from result string.

<p><i>Returns</i>

binValue as String

<p><i>Example</i>

Dim binValue as String
Dim intValue as Integer
Dim trimLeading as Integer

binValue = NSL.IntToBin(intValue, trimLeading)
</pre>
<a name="BinToInt"><h4>BinToInt</h4>

<pre>intValue = NSBSystemLib.BinToInt(binValue)</pre>

Convert the specified binary string to an integer value.
<pre><p><i>Parameter</i>

binValue as String

<p><i>Returns</i>

intValue as Integer

<p><i>Example</i>

Dim intValue as Integer
Dim binValue as String

intValue = NSL.BinToInt(binValue)
</pre>
<hr><a name="Screen and Color Functions"><h2>Screen and Color Functions</h2>
<a name="GetSupportedDepths"><h4>GetSupportedDepths</h4>

<pre>depths = NSBSystemLib.GetSupportedDepths()</pre>

Returns a bitmapped integer with each bit indicating a
bitmap depth supported by the PalmOS device.
<pre>
<p><i>Returns</i>

depths as Integer

<p><i>Example</i>

Dim depths as Integer
depths = NSL.GetSupportedDepths()
</pre>
The bit manipulation functions in this library or the
NS Basic Shared Library "BitsNBytes" probably provide
the best suited functions for evaluating the returned value
from this function.
<a name="DepthSupported"><h4>DepthSupported</h4>

<pre>boolean = NSBSystemLib.DepthSupported(depth)</pre>

Returns 1 if the specified depth is supported by the
PalmOS device.  Otherwise, it returns 0.
<pre><p><i>Parameter</i>

depth as Integer

<p><i>Returns</i>

boolean as Integer

<p><i>Example</i>

Dim boolean as Integer
Dim depth as Integer

depth = 4
boolean = NSL.DepthSupported(depth)
</pre>
<a name="ColorSupported"><h4>ColorSupported</h4>

<pre>boolean = NSBSystemLib.ColorSupported()</pre>

Returns 1 if the PalmOS device has color capabilities.
Otherwise, it returns 0.
<pre>
<p><i>Returns</i>

boolean as Integer

<p><i>Example</i>

Dim boolean as Integer
boolean = NSL.ColorSupported()
</pre>
<a name="SetDepth"><h4>SetDepth</h4>

<pre>NSBSystemLib.SetDepth depth</pre>

Sets the screen mode to support the specified bitmap
bit depth.
<pre><p><i>Parameter:</i>

depth as Integer

<p><i>Example</i>

Dim depth as Integer

depth = 4
NSL.SetDepth depth
</pre>
<a name="SetColor"><h4>SetColor</h4>

<pre>NSBSystemLib.SetColor boolean</pre>

Sets the screen mode to support color bitmaps.
<pre><p><i>Parameter:</i>

boolean as Integer
	1 = support color
	0 = do not support color

<p><i>Example</i>

Dim boolean as Integer

boolean = 1
NSL.SetColor boolean
</pre>
<a name="SaveScreenMode"><h4>SaveScreenMode</h4>

<pre>NSBSystemLib.SaveScreenMode()</pre>

Saves the current screen mode parameters.  These parameters
can later be restored by calling "RestoreScreenMode".  It is
suggested that the current screen mode parameters be saved before
any changes are requested and that these saved parameters
are restored when the program exits.
<pre>
<p><i>Example</i>

NSL.SaveScreenMode()
</pre>
<a name="RestoreScreenMode"><h4>RestoreScreenMode</h4>

<pre>NSBSystemLib.RestoreScreenMode()</pre>

Restores saved screen mode parameters.  These parameters
must have been saved by calling "SaveScreenMode".  It is
suggested that the current screen mode parameters be saved before
any changes are requested and that these saved parameters
are restored when the program exits.
<pre>
<p><i>Example</i>

NSL.RestoreScreenMode()
</pre>
<a name="CurrentDepth"><h4>CurrentDepth</h4>

<pre>depth = NSBSystemLib.CurrentDepth()</pre>

Returns the current bitmap depth.
<pre>
<p><i>Returns</i>

depth as Integer

<p><i>Example</i>

Dim depth as Integer
depth = NSL.CurrentDepth()
</pre>
<a name="CurrentColor"><h4>CurrentColor</h4>

<pre>boolean = NSBSystemLib.CurrentColor()</pre>

Returns 1 if the PalmOS Device's screen mode is currently
set to support color.   Otherwise, it returns 0.
<pre>
<p><i>Returns</i>

boolean as Integer

<p><i>Example</i>

Dim boolean as Integer
boolean = NSL.CurrentColor()
</pre>
<a name="SetToDefaults"><h4>SetToDefaults</h4>

<pre>NSBSystemLib.SetToDefaults()</pre>

Sets all screen mode parameters to their default values.
<pre>
<p><i>Example</i>

NSL.SetToDefaults()
</pre>
<a name="DefaultDepth"><h4>DefaultDepth</h4>

<pre>depth = NSBSystemLib.DefaultDepth()</pre>

Returns the default bitmap depth.
<pre>
<p><i>Returns</i>

depth as Integer

<p><i>Example</i>

Dim depth as Integer
depth = NSL.DefaultDepth()
</pre>
<a name="DefaultColor"><h4>DefaultColor</h4>

<pre>boolean = NSBSystemLib.DefaultColor()</pre>

Returns 1 if the PalmOS Device's screen mode default is
set to support color.   Otherwise, it returns 0.
<pre>
<p><i>Returns</i>

boolean as Integer

<p><i>Example</i>

Dim boolean as Integer
boolean = NSL.DefaultColor()
</pre>
<a name="GetTableEntryIndex"><h4>GetTableEntryIndex</h4>

<pre>index = NSBSystemLib.GetTableEntryIndex(which)</pre>

This function calls the PalmOS UIColorGetTableEntryIndex
function.  It returns the index value for a UI color for the
current system palette.
<pre><p><i>Parameter</i>

which as Integer
	UIObjectFrame = 0,
	UIObjectFill = 1
	UIObjectForeground = 2
	UIObjectSelectedFill = 3
	UIObjectSelectedForeground = 4
	
	UIMenuFrame = 5
	UIMenuFill = 6
	UIMenuForeground = 7
	UIMenuSelectedFill = 8
	UIMenuSelectedForeground = 9
	
	UIFieldBackground = 10
	UIFieldText = 11
	UIFieldTextLines = 12
	UIFieldCaret = 13
	UIFieldTextHighlightBackground = 14
	UIFieldTextHighlightForeground = 15
	UIFieldFepRawText = 16
	UIFieldFepRawBackground = 17
	UIFieldFepConvertedText = 18
	UIFieldFepConvertedBackground = 19
	UIFieldFepUnderline = 20
	
	UIFormFrame = 21
	UIFormFill = 22
	
	UIDialogFrame = 23
	UIDialogFill = 24
	
	UIAlertFrame = 25
	UIAlertFill = 26
	
	UIOK = 27
	UICaution = 28
	UIWarning = 29

<p><i>Returns</i>

index as Integer
	-1 = PalmOS version is less than 3.5

<p><i>Example</i>

Dim index as Integer
Dim which as Integer

which = 11   'UIFieldText
index = NSL.GetTableEntryIndex(which)
</pre>
This function requires PalmOS version 3.5 or greater.
<a name="GetTableEntryRGB"><h4>GetTableEntryRGB</h4>

<pre>index = NSBSystemLib.GetTableEntryRGB(which)</pre>

This function calls the PalmOS UIColorGetTableEntryRGB function.
It retrieves the RGB values for the UI Color.  RGB Values are
returned in a structure called "RGBColorType".  It contains the
following fields:
	index, red, green, blue.
This function retrieves all these values, but only returns
the index.  To get the red, green, and blue values, call this
function first and then call GetRGBRed, GetRGBGreen, and
GetRGBBlue.  See the example for more information.
<pre><p><i>Parameter</i>

which as Integer
	(see the GetTableEntryIndex function for
	 a list of valid "Which" values")

<p><i>Returns</i>

index as Integer
	-1 = PalmOS version is less than 3.5

<p><i>Example</i>

Dim index as Integer
Dim which as Integer
Dim red as Integer
Dim green as Integer
Dim blue as Integer

which = 11   'UIFieldText
index = NSL.GetTableEntryRGB(which)
red = SL.GetRGBRed()
green = SL.GetRGBGreen()
blue = SL.GetRGBBlue()
</pre>
This function requires PalmOS version 3.5 or greater.
<a name="GetRGBIndex"><h4>GetRGBIndex</h4>

<pre>index = NSBSystemLib.GetRGBIndex()</pre>

RGB Values are returned in a structure called "RGBColorType".
It contains the following fields:
	index, red, green, blue.
<br><br>
This function returns the index value that was previously
retrieved by either the GetTableEntryRGB or IndexToRGB functions.
<pre>
<p><i>Returns</i>

index as Integer

<p><i>Example</i>

Dim index as Integer
index = NSL.GetRGBIndex()
</pre>
<a name="GetRGBRed"><h4>GetRGBRed</h4>

<pre>red = NSBSystemLib.GetRGBRed()</pre>

RGB Values are returned in a structure called "RGBColorType".
It contains the following fields:
	index, red, green, blue.
<br><br>
This function returns the red value that was previously
retrieved by either the GetTableEntryRGB or IndexToRGB functions.
<pre>
<p><i>Returns</i>

red as Integer

<p><i>Example</i>

See the example provided with either the GetTableEntryRGB or
IndexToRGB functions.
</pre>
<a name="GetRGBGreen"><h4>GetRGBGreen</h4>

<pre>green = NSBSystemLib.GetRGBGreen()</pre>

RGB Values are returned in a structure called "RGBColorType".
It contains the following fields:
	index, red, green, blue.
<br><br>
This function returns the green value that was previously
retrieved by either the GetTableEntryRGB or IndexToRGB functions.
<pre>
<p><i>Returns</i>

green as Integer

<p><i>Example</i>

See the example provided with either the GetTableEntryRGB or
IndexToRGB functions.
</pre>
<a name="GetRGBBlue"><h4>GetRGBBlue</h4>

<pre>blue = NSBSystemLib.GetRGBBlue()</pre>

RGB Values are returned in a structure called "RGBColorType".
It contains the following fields:
	index, red, green, blue.
<br><br>
This function returns the blue value that was previously
retrieved by either the GetTableEntryRGB or IndexToRGB functions.
<pre>
<p><i>Returns</i>

blue as Integer

<p><i>Example</i>

See the example provided with either the GetTableEntryRGB or
IndexToRGB functions.
</pre>
<a name="SetTableEntryIndex"><h4>SetTableEntryIndex</h4>

<pre>NSBSystemLib.SetTableEntryIndex which, index</pre>

This subroutine calls the PalmOS IndexToRGB function and then
it calls UIColorSetTableEntry.	It changes a value in the UI
Color list.
<pre><p><i>Parameters</i>

which as Integer
	(see the GetTableEntryIndex function for
	 a list of valid "Which" values")

index as Integer

<p><i>Example</i>

Dim which as Integer
Dim index as Integer

NSL.SetTableEntryIndex which, index
</pre>
Some changes aren't reflected until the object or form is
redrawn with the "Redraw" statement.  Even then, some changes
like the form background (UIFormFill - 22) aren't reflected
until until you change forms with a "NextScreen" statement.
You might want to set some table entries in either the
programs "Startup" code or just before you use the "NextScreen"
statement.
<br><br>
This function requires PalmOS version 3.5 or greater.
<a name="SetTableEntryRGB"><h4>SetTableEntryRGB</h4>

<pre>NSBSystemLib.SetTableEntryRGB which, red, green, blue</pre>

This subroutine calls the PalmOS UIColorSetTableEntry function.
It changes a value in the UI Color list.
<pre><p><i>Parameters</i>

which as Integer
	(see the GetTableEntryIndex function for
	 a list of valid "Which" values")

red as Integer

green as Integer

blue as Integer
	Red, Green, Blue valid values are 0 to 255

<p><i>Example</i>

Dim which as Integer
Dim red as Integer
Dim green as Integer
Dim blue as Integer

NSL.SetTableEntryRGB which, red, green, blue
</pre>
Some changes aren't reflected until the object or form is
redrawn with the "Redraw" statement.  Even then, some changes
like the form background (UIFormFill - 22) aren't reflected
until until you change forms with a "NextScreen" statement.
You might want to set some table entries in either the
programs "Startup" code or just before you use the "NextScreen"
statement.
<br><br>
This function requires PalmOS version 3.5 or greater.
<a name="BrightnessAdjust"><h4>BrightnessAdjust</h4>

<pre>NSBSystemLib.BrightnessAdjust()</pre>

This subroutine calls the PalmOS UIBrightnessAdjust function.
It displays the "Brightness Adjust" dialog.
<pre>
<p><i>Example</i>

NSL.BrightnessAdjust()
</pre>
This function requires PalmOS version 3.5 or greater.
<a name="ContrastAdjust"><h4>ContrastAdjust</h4>

<pre>NSBSystemLib.ContrastAdjust()</pre>

This subroutine calls the PalmOS UIContrastAdjust function.
It displays the "Contrast Adjust" dialog.
<pre>
<p><i>Example</i>

NSL.ContrastAdjust()
</pre>
The PalmOS documentation states that this function only works
on the "Palm V Connected Organizer".
<br><br>
This function requires PalmOS version 3.5 or greater.
<a name="PickColorIndex"><h4>PickColorIndex</h4>

<pre>changed = NSBSystemLib.PickColorIndex(index, title)</pre>

This function calls the PalmOS UIPickColor function.  It
displays a Palette dialog to allow a user to select a
color.  The selected index and RGB values can be retrieved
by calling the GetRGBIndex, GetRGBRed, GetRGBGreen and
GetRGBBlue functions.
<pre><p><i>Parameters</i>

index as Integer
	Suggested index
title as String
	Title to display on dialog

<p><i>Returns</i>

changed as Integer
	-1 = PalmOS version is less than v3.5
	 0 = User cancelled or chose suggested index
	 1 = User chose a new index

<p><i>Example</i>

Dim changed as Integer
Dim index as Integer
Dim title as String

changed = NSL.PickColorIndex(index, title)
</pre>
This function requires PalmOS version of 3.5 or greater.
<a name="PickColorRGB"><h4>PickColorRGB</h4>

<pre>changed = NSBSystemLib.PickColorRGB(red, green, blue, title)</pre>

This function calls the PalmOS UIPickColor function.  It
displays an RGB dialog to allow a user to select a
color.  The selected index and RGB values can be retrieved
by calling the GetRGBIndex, GetRGBRed, GetRGBGreen and
GetRGBBlue functions.
<pre><p><i>Parameters</i>

red as Integer
green as Integer
blue as Integer
	Suggested Red, Green, Blue values (0 to 255)
title as String
	Title to display on dialog

<p><i>Returns</i>

changed as Integer
	-1 = PalmOS version is less than 3.5
	 0 = User cancelled or chose suggested colors
	 1 = User chose a new index

<p><i>Example</i>

Dim changed as Integer
Dim red as Integer
Dim green as Integer
Dim blue as Integer
Dim title as String

changed = NSL.PickColorRGB(red, green, blue, title)
</pre>
This function requires PalmOS version 3.5 or greater.
<a name="IndexToRGB"><h4>IndexToRGB</h4>

<pre>NSBSystemLib.IndexToRGB index</pre>

This subroutine calls the PalmOS WinIndexToRGB function.  It
converts an index in the currently active color table to an
RGB value.  RGB Values are returned in a structure called
"RGBColorType".  It contains the following fields:
	index, red, green, blue.
To get the actual index, red, green, and blue values, call this
function first and then call GetRGBIndex, GetRGBRed, GetRGBGreen,
and GetRGBBlue.  See the example for more information.
<pre><p><i>Parameter:</i>

index as Integer

<p><i>Example</i>

Dim index as Integer
NSL.IndexToRGB index
</pre>
This function requires PalmOS version 3.5 or greater.
<a name="RGBToIndex"><h4>RGBToIndex</h4>

<pre>index = NSBSystemLib.RGBToIndex(red, green, blue)</pre>

This function calls the PalmOS WinRGBToIndex function.  It
converts RGB values to the index of the closest color in the
currently active color lookup table (CLUT).
<pre><p><i>Parameters</i>

red as Integer
green as Integer
blue as Integer
	Red, Green, Blue valid values are 0 to 255

<p><i>Returns</i>

index as Integer
	-1 = PalmOS version is less than 3.5

<p><i>Example</i>

Dim index as Integer
Dim red as Integer
Dim green as Integer
Dim blue as Integer

index = NSL.RGBToIndex(red, green, blue)
</pre>
This function requires PalmOS version 3.5 or greater.
<a name="SetForeColor"><h4>SetForeColor</h4>

<pre>oldIndex = NSBSystemLib.SetForeColor(newIndex)</pre>

This function calls the PalmOS WinSetForeColor function.  It
sets the foreground color to use in subsequent draw operations.
<pre><p><i>Parameter</i>

newIndex as Integer

<p><i>Returns</i>

oldIndex as Integer
	Previous foreground index
	-1 = PalmOS version is less than 3.5

<p><i>Example</i>

Dim oldIndex as Integer
Dim newIndex as Integer

oldIndex = NSL.SetForeColor(newIndex)
</pre>
Colors set with this function appear to be reset to default
values when switching between forms or when a form is redrawn.
It is probably best to call this function in the form's
"After" code section.
<br><br>
This function requires PalmOS version 3.5 or greater.
<a name="SetBackColor"><h4>SetBackColor</h4>

<pre>oldIndex = NSBSystemLib.SetBackColor(newIndex)</pre>

This function calls the PalmOS WinSetBackColor function.  It
sets the background color to use in subsequent draw operations.
<pre><p><i>Parameter</i>

newIndex as Integer

<p><i>Returns</i>

oldIndex as Integer
	Previous background index
	-1 = PalmOS version is less than 3.5

<p><i>Example</i>

Dim oldIndex as Integer
Dim newIndex as Integer

oldIndex = NSL.SetBackColor(newIndex)
</pre>
Colors set with this function appear to be reset to default
values when switching between forms or when a form is redrawn.
It is probably best to call this function in the form's
"After" code section.
<br><br>
This function requires PalmOS version 3.5 or greater.
<a name="SetTextColor"><h4>SetTextColor</h4>

<pre>oldIndex = NSBSystemLib.SetTextColor(newIndex)</pre>

This function calls the PalmOS WinSetTextColor function.  It
sets the color to use for drawing characters in subsequent draw
operations.
<pre><p><i>Parameter</i>

newIndex as Integer

<p><i>Returns</i>

oldIndex as Integer
	Previous text color index
	-1 = PalmOS version is less than 3.5

<p><i>Example</i>

Dim oldIndex as Integer
Dim newIndex as Integer

oldIndex = NSL.SetTextColor(newIndex)
</pre>
Colors set with this function appear to be reset to default
values when switching between forms or when a form is redrawn.
It is probably best to call this function in the form's
"After" code section.
<br><br>
This function requires PalmOS version 3.5 or greater.
<a name="DrawLine"><h4>DrawLine</h4>

<pre>NSBSystemLib.DrawLine x1, y1, x2, y2</pre>

This soubroutine calls the PalmOS WinDrawLine function.  It
draws a line in the draw window using the current foreground
color.
<pre><p><i>Parameters</i>

x1 as Integer

y1 as Integer

x2 as Integer

y2 as Integer

<p><i>Example</i>

Dim x1 as Integer
Dim y1 as Integer
Dim x2 as Integer
Dim y2 as Integer

NSL.DrawLine x1, y1, x2, y2
</pre>
This function was provided for completeness only.  The
built-in DrawLine NSBasic statement produces the same result.
<a name="DrawGrayLine"><h4>DrawGrayLine</h4>

<pre>NSBSystemLib.DrawGrayLine x1, y1, x2, y2</pre>

This subroutine calls the PalmOS WinDrawGrayLine function.  It
does not draw in a gray color, but rather draws with
alternating foreground and background colors.
<pre><p><i>Parameters</i>

x1 as Integer

y1 as Integer

x2 as Integer

y2 as Integer

<p><i>Example</i>

Dim x1 as Integer
Dim y1 as Integer
Dim x2 as Integer
Dim y2 as Integer

NSL.DrawGrayLine x1, y1, x2, y2
</pre>
<a name="EraseLine"><h4>EraseLine</h4>

<pre>NSBSystemLib.EraseLine x1, y1, x2, y2</pre>

This subroutine calls the PalmOS WinEraseLine function.  It
draws a line in the draw window using the current background
color.
<pre><p><i>Parameters</i>

x1 as Integer

y1 as Integer

x2 as Integer

y2 as Integer

<p><i>Example</i>

Dim x1 as Integer
Dim y1 as Integer
Dim x2 as Integer
Dim y2 as Integer

NSL.EraseLine x1, y1, x2, y2
</pre>
<a name="InvertLine"><h4>InvertLine</h4>

<pre>NSBSystemLib.InvertLine x1, y1, x2, y2</pre>

This subroutine calls the PalmOS WinInvertLine function.  It
draws an inverted line in the draw window.
<pre><p><i>Parameters</i>

x1 as Integer

y1 as Integer

x2 as Integer

y2 as Integer

<p><i>Example</i>

Dim x1 as Integer
Dim y1 as Integer
Dim x2 as Integer
Dim y2 as Integer

NSL.InvertLine x1, y1, x2, y2
</pre>
<a name="DrawPixel"><h4>DrawPixel</h4>

<pre>NSBSystemLib.DrawPixel x, y</pre>

This subroutine calls the PalmOS WinDrawPixel function.  It
draws a pixel in the draw window using the current foreground
color.
<pre><p><i>Parameters</i>

x as Integer

y as Integer

<p><i>Example</i>

Dim x as Integer
Dim y as Integer

NSL.DrawPixel x, y
</pre>
<a name="ErasePixel"><h4>ErasePixel</h4>

<pre>NSBSystemLib.ErasePixel x, y</pre>

This subroutine calls the PalmOS WinErasePixel function.  It
draws a pixel in the draw window using the current background
color.
<pre><p><i>Parameters</i>

x as Integer

y as Integer

<p><i>Example</i>

Dim x as Integer
Dim y as Integer

NSL.ErasePixel x, y
</pre>
<a name="InvertPixel"><h4>InvertPixel</h4>

<pre>NSBSystemLib.InvertPixel x, y</pre>

This subroutine calls the PalmOS WinInvertPixel function.  It
draws an inverted pixel in the draw window.
<pre><p><i>Parameters</i>

x as Integer

y as Integer

<p><i>Example</i>

Dim x as Integer
Dim y as Integer

NSL.InvertPixel x, y
</pre>
<a name="GetPixel"><h4>GetPixel</h4>

<pre>index = NSBSystemLib.GetPixel(x, y)</pre>

This function calls the PalmOS WinGetPixel function.  It
returns the color of the specified a pixel in the draw window.
<pre><p><i>Parameters</i>

x as Integer
y as Integer

<p><i>Returns</i>

index as Integer

<p><i>Example</i>

Dim index as Integer
Dim x as Integer
Dim y as Integer

index = NSL.GetPixel(x, y)
</pre>
<a name="ScreenLock"><h4>ScreenLock</h4>

<pre>success = NSBSystemLib.ScreenLock(mode)</pre>

This function calls the PalmOS WinScreenLock function.  It
"locks" the current screen by switching the UI concept of the
screen base address to an area that is not reflected on the
display.  This routine can be used to "freeze" the display
while doing lengthy drawing operations to avoid a flickering
effect.  Call ScreenUnlock to unlock the display and cause
it to be updated with any changes.  The screen must be unlocked
as many times as it is locked to actually update the display.
<pre><p><i>Parameter</i>

mode as Integer
	winLockCopy = 0 - copy old screen to new
	winLockErase = 1 - erase new screen to white
	winLockDontCare = 2 - don't do anything

<p><i>Returns</i>

success as Integer
	-1 = PalmOS version is less than 3.5
	 1 = success
	 0 = failure

<p><i>Example</i>

Dim success as Integer
Dim mode as Integer

success = NSL.ScreenLock(mode)
</pre>
This function requires PalmOS version 3.5 or greater.
<a name="ScreenUnlock"><h4>ScreenUnlock</h4>

<pre>NSBSystemLib.ScreenUnlock()</pre>

This subroutine calls the PalmOS WinScreenUnlock function.  Call
ScreenUnlock to unlock the display and cause it to be updated
with any changes.  The screen, which was locked by calling
ScreenLock, must be unlocked as many times as it is locked to
actually update the display.
<pre>
<p><i>Example</i>

NSL.ScreenUnlock()
</pre>
This function requires PalmOS version 3.5 or greater.
<a name="WinSaveBits"><h4>WinSaveBits</h4>

<pre>NSBSystemLib.WinSaveBits index, x, y, width, height</pre>

<pre><p><i>Parameters</i>

index as Integer

x as Integer

y as Integer

width as Integer

height as Integer

<p><i>Example</i>

Dim index as Integer
Dim x as Integer
Dim y as Integer
Dim width as Integer
Dim height as Integer

NSL.WinSaveBits index, x, y, width, height
</pre>
<a name="WinRestoreBits"><h4>WinRestoreBits</h4>

<pre>NSBSystemLib.WinRestoreBits index, x, y</pre>

<pre><p><i>Parameters</i>

index as Integer

x as Integer

y as Integer

<p><i>Example</i>

Dim index as Integer
Dim x as Integer
Dim y as Integer

NSL.WinRestoreBits index, x, y
</pre>
<hr><a name="Sleep and Wake Event Functions"><h2>Sleep and Wake Event Functions</h2>
The following functions provide the ability to determine when and if
your system has gone to sleep or has been awakened - either through
the use of the power button or because of the system's "Auto Off"
feature.  The primary uses of this fuction would include determining
if you should end your program or prompt for a password during an
extended period of inactivity.
<a name="SetSleepEvent"><h4>SetSleepEvent</h4>

<pre>NSBSystemLib.SetSleepEvent eventNbr</pre>

Sets an event number to post when the device is powered off, either
through an AutoOff or by the user pressing the power button.
In General, the event number should be a custom event in the range of
24576 to 32767; however, any non-zero event number can be used.  A
particularly useful event number is the appStopEvent (event number 22).
This will cause the program to terminate and the "Termination Code"
section will be called.  Using an event number of 22 (appStopEvent)
may be necessary when a program must absolutely terminate.  This is
because displayed things like MsgBoxes and Alerts have their own
event loops and may ignore custom events.
<pre><p><i>Parameter:</i>

eventNbr as Integer
	Use 0 to cause no event to be posted.

<p><i>Example</i>

Dim eventNbr as Integer
eventNbr = 30000
NSL.SetSleepEvent eventNbr
</pre>
See the GetSleepEvent(), SetWakeEvent(), and GetWakeEvent() functions.
<a name="SetWakeEvent"><h4>SetWakeEvent</h4>

<pre>NSBSystemLib.SetWakeEvent eventNbr</pre>

Sets an event number to post when the device is powered on while
this library is loaded (ie. your NSBasic program is running and
is using this library).  In General, the event number should be a
custom event in the range of 24576 to 32767; however, any non-zero
event number can be used.  A particularly useful event number is the
appStopEvent (event number 22).  This will cause the program to
terminate and the "Termination Code" section will be called.  Using an
event number of 22 (appStopEvent) may be necessary when a program must
absolutely terminate.  This is because displayed things like MsgBoxes
and Alerts have their own event loops and may ignore custom events.
<pre><p><i>Parameter:</i>

eventNbr as Integer
	Use 0 to cause no event to be posted.

<p><i>Example</i>

Dim eventNbr as Integer
eventNbr = 30001
NSL.SetWakeEvent eventNbr
</pre>
Also see the GetWakeEvent(), SetSleepEvent(), and GetSleepEvent() functions.
<a name="GetSleepEvent"><h4>GetSleepEvent</h4>

<pre>eventNbr = NSBSystemLib.GetSleepEvent()</pre>

Returns the event number that gets posted when the device is powered
off either through an AutoOff or by the user pressing the power button.
Note that a value of 0 means that no event is posted.
<pre>
<p><i>Returns</i>

eventNbr as Integer

<p><i>Example</i>

Dim eventNbr as Integer
eventNbr = NSL.GetSleepEvent()
</pre>
Also see the SetSleepEvent(), SetWakeEvent(), GetWakeEvent(),
GetSleepEventTime(), and GetWakeEventTime() functions.
<a name="GetWakeEvent"><h4>GetWakeEvent</h4>

<pre>eventNbr = NSBSystemLib.GetWakeEvent()</pre>

Returns the event number that gets posted when the device is powered
on while this library is loaded (ie. your NSBasic program is running and
is using this library).
Note that a value of 0 means that no event is posted.
<pre>
<p><i>Returns</i>

eventNbr as Integer

<p><i>Example</i>

Dim eventNbr as Integer
eventNbr = NSL.GetWakeEvent()
</pre>
Also see the GetWakeEvent(), SetSleepEvent(), GetSleepEvent(),
GetSleepEventTime(), and GetWakeEventTime() functions.
<a name="GetSleepEventTime"><h4>GetSleepEventTime</h4>

<pre>eventTime = NSBSystemLib.GetSleepEventTime()</pre>

Returns the event time that gets saved when the device is powered
off either through an AutoOff or by the user pressing the power button.
Note that this time only gets saved if an event number has been registered using
the SetSleepEvent() function. A value of 0 means that no event has been posted.
<pre>
<p><i>Returns</i>

eventTime as Integer
	eventTime in system time format.  This value is expressed
	as the number of seconds since January 1st, 1904.

<p><i>Example</i>

Dim eventTime as Integer
eventTime = NSL.GetSleepEventTime()
</pre>
Also see the SetSleepEvent(), SetWakeEvent(), GetWakeEvent(), GetWakeEventTime(),
StringDateTime(), StringDate(), and StringTime() functions.
<a name="GetWakeEventTime"><h4>GetWakeEventTime</h4>

<pre>eventTime = NSBSystemLib.GetWakeEventTime()</pre>

Returns the event time that gets saved when the device is powered on.
Note that this time only gets saved if an event number has been registered using
the SetWakeEvent() function. A value of 0 means that no event has been posted.
<pre>
<p><i>Returns</i>

eventTime as Integer
	eventTime in system time format.  This value is expressed
	as the number of seconds since January 1st, 1904.

<p><i>Example</i>

Dim eventTime as Integer
eventTime = NSL.GetWakeEventTime()
</pre>
Also see the SetSleepEvent(), SetWakeEvent(), GetWakeEvent(), GetSleepEventTime(),
StringDateTime(), StringDate(), and StringTime() functions.
<hr><a name="String Encryption and Decryption Functions"><h2>String Encryption and Decryption Functions</h2>
The following functions provide encryption and decryption capabilities
for string values.  These functions use the PalmOS EncDES() function which
may or may not be available on all PalmOS devices.  Furthermore, the
length of these strings, currently, can not be longer than 248 characters.
Consideration of these restrictions should be carefully evaluated before
using these functions.
<br><br>
There is a Windows component of the EncryptDESString() and DecryptDESString()
functions. This component is implemented as a Windows DLL file and can be
called from Visual Basic/VBA and Visual C/C++. Its purpose is to allow a
conduit or other Palm Database utility to be able to encrypt or decrypt
data using the same algorythms as the NSBSystemLib routines.
<br><br>
To use it, the EncDec.dll file must be placed in a system directory or
some directory that is currently in your PATH. For Visual Basic/VBA,
include the EncDec.bas module. For Visual C/C++, include the EncDec.h
header file and link with the EncDec.lib library (note that the EncDec.dll
is still required).
<br><br>
The EncDec DLL functions have the same restrictions as their NSBSystemLib
library counterparts. The main differences are that you specify the
encryption key with every function call and that the functions return the
length of the returned string.
<br><br>
VB/VBA Example:
<pre>Dim KeyStr As String
Dim DecryptedStr As String
Dim EncryptedStr As String
Dim StrLen As Integer
<br><br>
KeyStr = "secret"
DecryptedStr = "The quick brown fox jumps over the lazy dog!"
StrLen = EncryptData(KeyStr, DecryptedStr, EncryptedStr)
DecryptedStr = ""
StrLen = DecryptData(KeyStr, EncryptedStr, DecryptedStr)
</pre>C++ Example:
<pre>char keyStr[25];
char decryptedStr[251];
char encryptedStr[251];
int  len;
<br><br>
strcpy(keyStr, "secret");
strcpy(decryptedStr, "The quick brown fox jumps over the lazy dog!");
len = encryptData(keyStr, decryptedStr, encryptedStr);
strcpy(decryptedStr, "");
len = decryptData(keyStr, encryptedStr, decryptedStr);
</pre><a name="EncryptDESString"><h4>EncryptDESString</h4>

<pre>encryptedStr = NSBSystemLib.EncryptDESString(decryptedStr)</pre>

Returns the encrypted value of the plainText string. The plainText string
can not be more than 248 characters in length. The length of the encrypted
string may be up to 9 characters longer than the plainText string. Note:
the SetDESKey subroutine must have been called at least once prior to
calling this function.
<pre><p><i>Parameter</i>

decryptedStr as String

<p><i>Returns</i>

encryptedStr as String

<p><i>Example</i>

Dim encryptedStr as String
Dim decryptedStr as String

encryptedStr = NSL.EncryptDESString(decryptedStr)
</pre>
<a name="DecryptDESString"><h4>DecryptDESString</h4>

<pre>decryptedStr = NSBSystemLib.DecryptDESString(encryptedStr)</pre>

Returns the plain text value of the encryptedText string. The encryptedText
string can not be more than 250 characters in length. Note: the SetDESKey
subroutine must have been called at least once prior to calling this function.
<pre><p><i>Parameter</i>

encryptedStr as String

<p><i>Returns</i>

decryptedStr as String

<p><i>Example</i>

Dim decryptedStr as String
Dim encryptedStr as String

decryptedStr = NSL.DecryptDESString(encryptedStr)
</pre>
<a name="SetDESKey"><h4>SetDESKey</h4>

<pre>NSBSystemLib.SetDESKey keyStr</pre>

Establishes the encryption or decryption key to be used with the
EncryptDESString() and DecryptDESString() functions. This key value
must be set before using these functions. Once set, it will be used for
all subsequent operations or until the program ends. If the length of
the key is 8 characters or less, standard DES encryption will be used.
If the key length is from 9 to 24 characters, Triple-DES encryption is used.
<pre><p><i>Parameter:</i>

keyStr as String

<p><i>Example</i>

Dim keyStr as String
NSL.SetDESKey keyStr
</pre>
</html>

