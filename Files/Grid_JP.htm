<html><head><meta http-equiv=Content-Type content="text/html; charset=shift_jis"><title>Grid Control</title></head><body bgcolor=#ffffff><h2>13. Gridコントロールを使う</h2><p>Grid（グリッド）コントロールは、フォーマットされた表にデータを表示するための簡単な手段です。表は横の行と縦の列から構成されています。行と列が交差する部分をセルと呼びます。Samplesに含まれているサンプルプロジェクトのGrid.prjをご覧になって、このコントロールがどのように動作するか確認されるとよいでしょう。以下の説明の中に太字の文字がありますが、これらはグリッドコントロールのプロパティやメソッドです。これらを使うには、コントロールの参照名とピリオドをプロパティやメソッドの前に付けます。</p><h3>A. IDEの中でGridを設定</h3><p>プロジェクトのフォーム上にグリッドを配置するには、グリッドオブジェクトを選択し、Palm&nbsp;Screen上の配置したい場所をクリックします。<b>Cols</b>（列数）と<b>Visible&nbsp;Rows</b>（見えてる行数）をセットします。<b>Visible&nbsp;Rows</b>の数を変更すると、グリッドの<b>Height</b>（高さ）が増え、行のサイズは変わりません。<b>Height</b>を変更すると、各行の高さが変わります。グリッド作成時には全ての列は同じ幅に分けられ、実行時に幅を変更することができます。フォームがロードされる時に自動的にグリッドを隠すことはできません。</p><p><b>Has&nbsp;Scrollbar</b>オプションを選ぶ時、オブジェクトの右にくるスクロールバーのスペースを残してWidthを設定してください。約10ピクセル必要です。</p><h3>B. 実行時にGridを初期化</h3><p>Form&nbsp;After&nbsp;Code内で実行時に行うグリッドの初期化を済ますことができます。最初に<b>Hide</b>を行うと良いでしょう。これによって表のアップデートの度に画面が更新されるのを避けることができます。次に、列の幅、タイプ、初期値を設定し、最後に<b>Show</b>を行ないます。</p><p>列の幅の設定は<b>&nbsp;ColWidth</b>(<i>colNo</i>)=<i>p&nbsp;</i>を使います。<i>colNo</i>は列の番号で、<i>p</i>&nbsp;はその列の幅をピクセル値で指定します。列はテキスト、数値、またはチェックボックスに設定できます。</p><p>列のタイプを設定するには<b>&nbsp;ColType</b>&nbsp;<i>colNo</i>,&nbsp;<i>type</i>,&nbsp;<i>formatString</i>&nbsp;を使います。<i>type</i>は&quot;text&quot;、&quot;numeric&quot;、</p><p>&quot;checkbox&quot;のどれかになります。 </p><p><i>type</i>が”text”の場合、その列には文字列値を入れることができます。<i>formatString</i>で指定する文字列は、<b>Add</b>によって新しい行ができた時に、その列のセルに入る初期値になります。通常は空白(“”)文字列です。”text”は列のデフォルトタイプです。テキストタイプの列に入るデータは左揃えになります。</p><p><i>type</i>が”numeric”の場合、<i>formatString</i>で数値がどのように表示されるかを指定します。これはFORMATステートメントで使うフォーマット文字列と同じです。例えば、<i>formatString</i>が”nnn”の場合、３桁の右揃えの数字が表示されます。デフォルトフォーマットは0 です。</p><p><i>type</i>が”checkbox”の場合、<i>formatString</i>にはオプションとして、チェックボックスの右に現れる文字列を指定することができます。デフォルト値は空白文字列です。右にテキストを持たないチェックボックスの幅は、</p><p><b>colWidth</b>で12を指定すると良いでしょう。チェックボックスタイプのセルには数値または文字列を代入することができます。0&nbsp;または&nbsp;“0”&nbsp;が代入されると、チェックボックスのチェックが外れ、それ以外の値が代入されるとボックスはチェックされます。チェックボックス列のデフォルトは、チェックが外されている状態です。</p><h5>例</h5><pre>'set up a grid with 3 columns: text, numeric and checkboxgrid1.hidegrid1.colwidth(1)=121grid1.ColType 1,&quot;text&quot;,&quot;&quot;grid1.colwidth(2)=14grid1.ColType 2,&quot;numeric&quot;,&quot;nnn&quot;grid1.colWidth(3)=12grid1.ColType 3,&quot;checkbox&quot;,&quot;&quot;displayGrid 'call another function to set initial valuesgrid1.show</pre><h3>C. Gridにデータを書込む</h3><p class=MsoHeader>一旦グリッドがセットされたら、<b>Text</b>、<b>Value</b>、<b>TextMatrix</b>、<b>ValueMatrix</b>関数を使って、データをセルに入れていくことができます。<b>Text</b>および<b>Value</b>はそれぞれテキストと数値をカレントセルに入れます。カレントセルは<b>Row</b>（行）と<b>Col</b>（列）で定義されます。カレントセルを変更するには、<b>Row</b>と<b>Col</b>プロパティに新しい値を代入します。</p><p class=MsoHeader>これを早く行うには<b>TextMatrix</b>と<b>ValueMatrix</b>を使います。これらの関数は行と列の値を引数として受けますので、<b>Row</b>と<b>Col</b>プロパティを別にセットする必要がありません。<b>Redraw</b>メソッドは、全てのセルが更新された後に使うことができます。</p><p>行を追加するには<b>Add</b>メソッドを使います。<b>RowData</b>プロパティは各行毎に、表示されない特有の値を保管することができます。グリッド内の全ての行を消去するには<b>Clear</b>メソッドを使います。<b>Clear</b>を行うと<b>Rows</b>の値は0になります。また、<b>Rows</b>の値を変更することによって、行を足したり削除したりできます。<b>Remove</b>を使うと、１つの行を指定して削除できます。</p><h5>例</h5><pre>MyGrid.ClearFor r=1 to 10<　　 MyGrid.add　　 Grid.TextMatrix(r,1)=&quot;some data&quot;　　 Grid.ValueMatic(r,2)=2　　 Grid.ValueMatix(r,3)=1Next</pre><h3>D. データベースからデータをGridに読込む</h3><p>データベースからの情報を使ってグリッドを埋めることもできます。これを行うには、ちょっとした準備が必要です。最初に、DIMを使ってデータベース変数を定義し、どのデータベースを読込むかを指定します。DIM WITH RECORDステートメントを使います。例えば：</p><pre>Dim blueKey as IntegerType dbBluesLayout　　　 Name as String　　　 age as Integer　　　 active as IntegerEnd TypeDim dbBlues1 as Database &quot;Blues&quot;, DbBluesRec, dbBluesLayout, BlueKey</pre><p>ここではPalmに入ってる“Blues”と呼ばれるデータベースのデータを読み込みたいわけです。データベース変数（これを使ってデータベースを参照します）はdbBlues1です。データベース内の各レコードは、</p><p>dbBluesLayout内のフィールドを持っています。１つのレコードを読込むとdbBluesRec変数に納められます。データベースのキーはblueKeyで整数型です。dbBluesRecは自動的に（グローバルではなく）通常の変数として設定されますので、このステートメントは<b>BindToDatabase</b>コールと同じルーチンで行われなければなりません。</p><p class=MsoToc1>データベースの定義は済みましたので、BindToDatabaseコール使って直接グリッドに情報をコピーします。</p><pre>Grid1.bindToDatabase(dbBlues1, dbBluesRec.name, dbBluesRec.Age, _　dbBluesRec.active) Where dbBluesRec.age&gt;=70</pre><p>このステートメントは、dbBlues1で参照するデータベースからグリッド（Grid1）へデータをコピーします。次に続く３つの引数は、データベースレコードのフィールドのリストで、それぞれ別の列に入ります。列はレコードのレイアウト（dbBluesLayout）のフィールドと同じ順番である必要はなく、また全てのフィールドを使う必要もありません。オプションのWHEREは、どのレコードをグリッドにコピーするか選ぶことができます。IFステートメントで使われる式であれば、どんな式でもWHEREの後に入れることができます。</p><p><b>Visible&nbsp;Rows</b>よりレコード数が多く、<b>Has&nbsp;ScrollBar</b>がセットされている場合、スクロールバーが現れ全てのレコードを見ることでできます。レコード数がかなり多い場合、スクロールの矢印は細かく正確に動作しませんので注意してください。レコードは表示される時のみグリッドにコピーされますので、大きなデータベースでも時間の遅れはありません。</p><p>レコードが各行に読込まれる時、データベースのレコード番号が各行の<b>rowData</b>にセットされます。これは指定する行のデータベースレコードを確認したい時に便利です：</p><pre>Dim recNo as integerDim err as integerrecNo=Grid1.rowData(Grid1.Row) '指定行のrowDataを得るerr=dbPosition(dbBlues, recNo)err=dbRead(dbBlues, dbBluesLayout)</pre><h3>E. Gridへのアクセス</h3><p>ユーザがグリッドをタップすると、グリッドオブジェクト用のコードが実行されます。データは直接セルにタイプすることはできません。そのルーチンの中で、いくつかの変数を確認して何を行うか判断できます。<b>Row</b>と<b>Col</b>プロパティはカレント行と列を持っています。<b>Row</b>を使って<b>RowData</b>値を得て、元のデータベースのレコードにアクセス（データベースをバインドしたグリッドの場合）したり、他のデータにアクセスすることができます。</p><p><b>Text</b>、<b>Value</b>、<b>TextMatrix</b>、<b>RowMatrix</b>を使って値を変更することができますが、データベースをバインドしたグリッドの場合、自動的にデータベースは更新されません。データベースを更新するには、rowDataプロパティでデータベースレコードを特定し、読み込み、変更、書き込みを行うコードを書かなくてはなりません。</p><p><b>TopRow</b>はスクロールするグリッドを処理する時に便利な値です。これはその時表示されている一番上の行番号を与えてくれます。また、<b>TopRow</b>の値を変えることによって、強制的にその行が最初にくるようにグリッドをスクロールします。</p><p>　</p><p>　</p><h2>Dim&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ステートメント</h2><p>DIM　<i>varname</i> AS <i>type</i><br>DIM <i>varArray</i>(<i>nnn</i>) AS <i>type</i><br>DIM <i>varname</i> AS <i>type</i>*<i>length </i>[,<i>decimalPlaces</i>]<br>DIM <i>varArray</i>(<i>nnn</i>) AS <i>type</i>*<i>length</i>[,<i>decimalPlaces</i>]<br>DIM varName AS DATABASE dbName, dbRec, dbLayout [, key]</p><p><b>説明</b></p><p>ファンクションやサブルーチン内で使用される変数を定義します。変数が配列の場合、<i>nnn</i>が予約される要素の数を指定します。</p><table border=1 cellspacing=0 cellpadding=0>      <tr>	<td width=72 valign=top class="Normal">	  <p><i>Type</i></p>	</td>	<td width=523 valign=top class="Normal">	  <p>　</p>	</td>  </tr>      <tr>	<td width=72 valign=top class="Normal">	  <p>Byte</p>	</td>	<td width=523 valign=top class="Normal">	  <p>一つの文字。データベースへの入力／出力は、一つの文字が書込まれる。（末尾のnull文字は含まない）</p>	</td>  </tr>      <tr>	<td width=72 valign=top class="Normal">	  <p>Database</p>	</td>	<td width=523 valign=top class="Normal">	  <p>データベースコマンドで使用されるデータベースリファレンスの定義に使用。データベースがGridコントロールにバインドされる場合、余分に引数が必要になる。</p>	  </td>  </tr>      <tr>  	<td width=72 valign=top class="Normal">	  <p>Date</p>	</td>	<td width=523 valign=top class="Normal">	  <p>日付の値の保管に使用。これはPalmの内部フォーマットではない。データベースへの入力／出力は、64-bit浮動小数点数が使用される。日付は内部的には <br>		(year-1900)*10000+month*100+day  として保管される。</p>	  </td>  </tr>      <tr>	<td width=72 valign=top class="Normal">	  <p>Double</p>	</td>	<td width=523 valign=top class="Normal">	  <p>Floatと全て同様。</p>	</td>  </tr>      <tr>	<td width=72 valign=top class="Normal">	  <p>Float</p>	</td>	<td width=523 valign=top class="Normal">	  <p>整数および小数の両方の保管に使用。データベースへの入力／出力は、64&#8209;bit(8&#8209;byte)の倍精度浮動小数点フォーマットが使用される。</p>	</td>  </tr>      <tr>	<td width=72 valign=top class="Normal">	  <p>Integer</p>	</td>	<td width=523 valign=top class="Normal">	  <p>整数の保管に使用（小数点から右へのポジションは無し）。データベースへの入力／出力は、32&#8209;bit(4&#8209;byte)のinteger（整数）フォーマットが使用される。</p>	</td>  </tr>      <tr>  	  	<td width=72 valign=top class="Normal">  			  <p>Short</p>	</td>	<td width=523 valign=top class="Normal">  			  <p>Integerに似ているが、データベースへの入力／出力は、16&#8209;bit(2&#8209;byte)フォーマットが使用される。</p>	</td>  </tr>      <tr>  	  	<td width=72 valign=top class="Normal">  			  <p>Single</p>	</td>	<td width=523 valign=top class="Normal">  			  <p>データベースへの入力／出力が、32&#8209;bit(4&#8209;byte)の単精度浮動小数点フォーマットが使用されるのを除き、Floatと同様。</p>	</td>  </tr>      <tr>  	  	<td width=72 valign=top class="Normal">  			  <p>String</p>	</td>	<td width=523 valign=top class="Normal">  			  <p>最大サイズが32767文字の文字列</p>	</td>  </tr>      <tr>  	  	<td width=72 valign=top class="Normal">  			  <p>Time</p>	</td>	<td width=523 valign=top class="Normal">  			  <p>時間の値の保管に使用。これはPalmの内部フォーマットではない。データベースへの入力／出力は、64-bit浮動小数点数が使用される。時間は内部的には  hour*10000+minute*100+seconds  として保管される。</p>	  </td>  </tr>      <tr>  	  	<td width=72 valign=top class="Normal">  			  <p>UserType</p>	</td>	<td width=523 valign=top class="Normal">  			  <p>TYPE  および END TYPE ステートメントを参照。</p>	</td>  </tr>      <tr>  	  	<td width=72 valign=top class="Normal">  			  <p>Variant</p>	</td>	<td width=523 valign=top class="Normal">  			  <p>SysTrapFunc  および SysTrapSub ファンクションを参照。</p>	</td>  </tr></table><p><i>length</i>は何桁表示されるか指定します。<i>DecimalPlaces</i>は小数点より右側何桁かを指定します。これは最大でも<i>length</i>より２桁少なくてはなりません。</p><p>Gridで使用されるデータベースを定義する場合、varNameは変数名になります。DbNameはPalm&nbsp;OSデバイス上にあるデータベースの名前です。dbRecはグローバル変数で、データベースのカレントレコードの内容を参照するための名前です。dbLayoutはレコードの構成で、TYPEステートメントによって予め定義されている必要があります。keyは任意の変数で、dbNameデータベースに使われるキーです。このフォームはBindToDataBaseメソッドの最初の引数<i>Varname</i>を定義するためだけに使用されます。</p><p><b>例</b></p><pre>Dim income as float*12,2Dim count as integerDim yesterday as dateDim appt as timeDim rates(12) as floatDim Orders as databaseType dbBluesLayout　　　 Name as String　　　 age as Integer　　　 active as IntegerEnd TypeDim blueKey as IntegerDim dbBlues1 as Database &quot;Blues&quot; Creator&quot;Grid&quot; Keyed With Record BlueKey, dbBluesRec as dbBluesLayout</pre><p>　</p><p>　</p><h2>Grid&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;オブジェクト</h2><p>Gridオブジェクトは、データベースから自動的に読込まれるデータ、またはプログラム内で提供されるデータの表を表示します。グリッドの基本的な見た目はデザイン時に定義し、実行時にデータと一緒になります。</p><p>グリッドのセルがタップされると、グリッドのrow（行）とcol（列）プロパティがセットされ、プログラム内で使用することができます。ユーザは直接フィールドを編集することはできませんが、TextMatrixと ValueMatrixを使うことによって値の変更が可能です。 TextとValueはカレントセルに対して使えます。</p><p>このオブジェクトに関する詳細は、このハンドブックのセクション13をご覧下さい。</p><p><b>このオブジェクト特有のプロパティとメソッド</b></p><table width="100%" border="0" cellspacing="10" cellpadding="0" height="300">  <tr>	<td colspan="2">	  <p>.BINDTODATABASE　<i>dbName</i>, <i>dbFieldNameList</i> [Where <i>condition</i>]</p>	</td>  </tr>  <tr>	<td colspan="2">データベースのデータを自動的にグリッドへ読込みます。<i>DbName</i>はデータベース変数で、DIM WITH RECORDステートメントで予めセットします。<i>DbFIeldNameList</i>はデータベースのフィールド名のリストか、データベースのType構造名です。<i>Condition</i>はオプションで、表示するレコードを選びます。フォーマットはIFステートメントと同じです。</td>  </tr>  <tr>	<td width="250">.COL</td>	<td>カレント列を得るか設定します。範囲は１からCOLS。</td>  </tr>  <tr>	<td>.COLS</td>	<td>列数を得ます。</td>  </tr>  <tr>	<td>.COLTYPE　<i>colNo</i>, <i>type</i>, <i>formatString</i></td>	<td>　</td>  </tr>  <tr>	<td colspan="2">列のタイプとフォーマットを設定します。デフォルトはテキストタイプで値はnullです。違うタイプの列が必要な場合、実行時にこのメソッドを使って設定します。<i>colNo</i>はグリッド内の列の番号です。タイプは&quot;text&quot;(テキスト)、&quot;numeric&quot;(数値)、&quot;checkbox&quot;(チェックボックス)のどれかになります。<i>formatString</i>には文字列を入れますが、<i>type</i>の値によってことなります。typeが&quot;text&quot;の場合、セルに最初に表示される文字列を<i>formatString</i>に入れます。&quot;numeric&quot;の場合、FORMATステートメントで使われるフォーマット文字列を入れます。&quot;checkbox&quot; の場合、チェックボックスの右にくる文字列を入れます。</td>  </tr>  <tr>	<td>.COLWIDTH(<i>colNo</i>)</td>	<td><i>colNo</i>（列番号）の列の幅を得るか設定します。</td>  </tr>  <tr>	<td>.ROW</td>	<td>カレント行を得るか設定します。範囲は１からROWS。</td>  </tr>  <tr>	<td>.ROWDATA</td>	<td> 行のrowdata値を得るか設定します。ユーザが定義する値。</td>  </tr>  <tr>	<td>.ROWS</td>	<td>行数を得るか設定します。</td>  </tr>  <tr>	<td>.TEXT</td>	<td>テキストタイプのカレントセルの値を得るか設定します。</td>  </tr>  <tr>	<td>.TEXTMATRIX(<i>rowNo</i>, <i>ColNo</i>)</td>	<td><i>rowNo</i>（行番号）と<i>ColNo</i>（列番号）のセルのテキスト値を得るか設定します。</td>  </tr>  <tr>	<td>.VALUE</td>	<td>数値タイプのカレントセルの値を得るか設定します。</td>  </tr>  <tr>	<td>.VALUEMATRIX(<i>rowNo</i>, <i>ColNo</i>)</td>	<td><i>rowNo</i>（行番号）と<i>ColNo</i>（列番号）のセルの数値を得るか設定します。</td>  </tr></table><p><b>サポートされてるプロパティ</b>（デザイン時にセット）<br>  Cols, Has Scrollbar, Height, Left, Top, Visible Rows, Width</p><p><b>他のサポートされてるメソッド</b>（&quot;Methods&quot;参照）<br>  Add, Clear, Hide, Redraw, Remove, Show</p><p>　</p></body></html>